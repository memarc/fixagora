/**
 * Copyright (C) 2012-2013 Alexander Pinnow
 * 
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Library General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 * 
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Library General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU Library General Public License
 * along with this library; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 * 
 **/
package net.sourceforge.fixagora.basis.client.model.editor;

/**
 * The Class FunctionDescription.
 */
public class FunctionDescription {

	/**
	 * Gets the html.
	 *
	 * @param name the name
	 * @return the html
	 */
	public static String getHtml(String name) {

		 if(name.equals("ABS")) return "<HTML><BODY><H1>ABS</H1>Returns the absolute value of a number.<BR><BR><H2>Syntax</H2><B>ABS(number)</B><BR> <B>number</B> is the number whose absolute value is to be calculated.<BR><BR> The absolute value of a number is its value without the +/- sign.<BR><BR><H2>Example</H2><B>ABS(-56)</B><BR> returns <B>56</B>.<BR><BR><B>ABS(12.3)</B><BR>returns <B>12.3</B>.<BR><BR><B>ABS(0)</B><BR> returns <B>0</B>.</BODY></HTML>";
		 else if(name.equals("ACOS")) return "<HTML><BODY><H1>ACOS</H1>Returns the inverse cosine (the arccosine) of a number.<BR><BR><H2>Syntax</H2><B>ACOS(number)</B><BR> returns the inverse trigonometric cosine of <B>number</B>, in other words the angle (in radians) whose cosine is <B>number</B>.<BR><BR> The angle returned is between <B>0</B> and <B>PI</B>.<BR><BR> To return the angle in degrees, use the <B>DEGREES</B> function.<BR><BR><H2>Example</H2><B>ACOS(-1)</B><BR> returns <B>3.14159265358979</B> (<B>PI</B> radians).<BR><BR><B>DEGREES(ACOS(0.5))</B><BR> returns <B>60</B>.<BR><BR> The cosine of <B>60</B> degrees is <B>0.5</B>.</BODY></HTML>";
		 else if(name.equals("ACOSH")) return "<HTML><BODY><H1>ACOSH</H1>Returns the inverse hyperbolic cosine of a number.<BR><BR><H2>Syntax</H2><B>ACOSH(number)</B><BR> returns the inverse hyperbolic cosine of <B>number</B>, in other words the number whose hyperbolic cosine is <B>number</B>.<BR><BR>  <B>number</B> must be greater than or equal to <B>1</B>.<BR><BR><H2>Example</H2><B>ACOSH(1)</B><BR> returns <B>0</B>.<BR><BR><B>ACOSH(COSH(4))</B><BR> returns <B>4</B>.</BODY></HTML>";
		 else if(name.equals("ADDRESS")) return "<HTML><BODY><H1>ADDRESS </H1>Returns a cell reference as text, given row and column numbers.<BR><BR> <H2>Syntax</H2><B>ADDRESS(row, column, mode, type, sheet)</B><BR> <B>row</B> is a <u>number</u> specifying the row.<BR><BR> <B>column</B> is a <u>number</u> (not a letter) specifying the column.<BR><BR> <B>mode</B> (an optional number) determines whether the cell address is absolute or relative.<BR><BR> If omitted, it is assumed to be <B>1</B>.<BR><BR> <B>type</B> is an optional number; if <B>0</B>, <B>ADDRESS</B> returns R1C1 notation, and otherwise (or if omitted) <B>ADDRESS</B> returns the usual A1 notation.<BR><BR> <B>sheet</B> is an optional <u>text string</u> specifying the sheet.<BR><BR> In the usual A1 notation, Calc separates the sheet name with a <B>.<BR><BR></B> character; in the R1C1 notation, Calc separates the sheet name with a <B>!</B> character.<BR><BR><H2>Example</H2><B>ADDRESS(4, 3, 2,, &quot;Sheet2&quot;)</B><BR> returns the text <B>Sheet2.<BR><BR>C$4</B>.<BR><BR> Note the omitted <B>type</B> parameter.<BR><BR><B>ADDRESS(4, 3, 4)</B><BR> returns the text <B>C4</B>.<BR><BR><B>ADDRESS(4, 3)</B><BR> returns the text <B>$C$4</B>.<BR><BR><B>ADDRESS(4, 3, 2, 0, &quot;Sheet2&quot;)</B><BR> returns the text <B>Sheet2!R4C[3]</B>.</BODY></HTML>";
		 else if(name.equals("AND")) return "<HTML><BODY><H1>AND </H1>Returns TRUE if all the arguments are considered TRUE, and FALSE otherwise.<BR><BR><H2>Syntax</H2><B>AND(argument1, argument2 ...argument30)</B><BR><BR><B>argument1</B> to <B>argument30</B> are up to 30 arguments, each of which may be a logical result or value, or a reference to a cell or range.<BR><BR><B>AND</B> tests every value (as an argument, or in each referenced cell), and returns <B>TRUE</B> if they are all <B>TRUE</B>.<BR><BR> Any value which is a non-zero number or text is considered to be <B>TRUE</B>.<BR><BR> <H2>Example</H2>If cells A5:B8 all contain <B>TRUE</B>, cell C2 contains <B>=TRUE()</B> and cell C3 contains &quot;<B>dog</B>&quot;<B>AND(2&lt;4,A5:B8,C2)</B><BR> returns <B>TRUE</B>.<BR><BR><B>AND(2&lt;4,FALSE)</B><BR> returns <B>FALSE</B>.<BR><BR><B>AND(C2:C3)</B>) returns <B>TRUE</B>.</BODY></HTML>";
		 else if(name.equals("ASIN")) return "<HTML><BODY><H1>ASIN</H1>Returns the inverse sine (the arcsine) of a number.<BR><BR><H2>Syntax</H2><B>ASIN(number)</B><BR> returns the inverse trigonometric sine of <B>number</B>, in other words the angle (in radians) whose sine is <B>number</B>.<BR><BR> The angle returned is between <B>-PI/2</B> and <B>+PI/2</B>.<BR><BR> To return the angle in degrees, use the <B>DEGREES</B> function.<BR><BR><H2>Example</H2><B>ASIN(0)</B><BR> returns <B>0</B>.<BR><BR><B>ASIN(1)</B><BR> returns <B>1.5707963267949</B> (<B>PI/2</B> radians).<BR><BR><B>DEGREES(ASIN(0.5))</B><BR> returns <B>30</B>.<BR><BR> The sine of <B>30</B> degrees is <B>0.5</B>.</BODY></HTML>";
		 else if(name.equals("ASINH")) return "<HTML><BODY><H1>ASINH</H1>Returns the inverse hyperbolic sine of a number.<BR><BR><H2>Syntax</H2><B>ASINH(number)</B><BR> returns the inverse hyperbolic sine of <B>number</B>, in other words the number whose hyperbolic sine is <B>number</B>.<BR><BR> <H2>Example</H2><B>ASINH(-90)</B><BR> returns approximately <B>-5.1929877</B>.<BR><BR><B>ASINH(SINH(4))</B><BR> returns <B>4</B>.</BODY></HTML>";
		 else if(name.equals("ATAN")) return "<HTML><BODY><H1>ATAN</H1>Returns the inverse tangent (the arctangent) of a number.<BR><BR><H2>Syntax</H2><B>ATAN(number)</B><BR> returns the inverse trigonometric tangent of <B>number</B>, in other words the angle (in radians) whose tangent is <B>number</B>.<BR><BR> The angle returned is between <B>-PI/2</B> and <B>PI/2</B>.<BR><BR> To return the angle in degrees, use the <B>DEGREES</B> function.<BR><BR><H2>Example</H2><B>ATAN(1)</B><BR> returns <B>0.785398163397448</B> (<B>PI/4</B> radians).<BR><BR><B>DEGREES(ATAN(1))</B><BR> returns <B>45</B>.<BR><BR> The tangent of <B>45</B> degrees is <B>1</B>.</BODY></HTML>";
		 else if(name.equals("ATAN2")) return "<HTML><BODY><H1>ATAN2</H1>Returns the inverse tangent (the arctangent) for specified x and y coordinates.<BR><BR><H2>Syntax</H2><B>ATAN2(x_coord, y_coord)</B><BR> <B>x_coord</B> is the value of the x coordinate.<BR><BR> <B>y_coord</B> is the value of the y coordinate.<BR><BR> <B>ATAN2</B> returns the inverse trigonometric tangent, that is, the angle (in radians) between the x-axis and a line from point <B>x_coord</B>, <B>y_coord</B> to the origin.<BR><BR> The angle returned is between <B>-PI</B> and <B>PI</B>.<BR><BR> To return the angle in degrees, use the <B>DEGREES</B> function.<BR><BR><H2>Example</H2><B>ATAN2(20, 20)</B><BR> returns <B>0.785398163397448</B> (<B>PI/4</B> radians).<BR><BR><B>DEGREES(ATAN2(12.3, 12.3))</B><BR> returns <B>45</B>.<BR><BR> The tangent of <B>45</B> degrees is <B>1</B>.</BODY></HTML>";
		 else if(name.equals("ATANH")) return "<HTML><BODY><H1>ATANH</H1>Returns the inverse hyperbolic tangent of a number.<BR><BR><H2>Syntax</H2><B>ATANH(number)</B><BR> returns the inverse hyperbolic tangent of <B>number</B>, in other words the number whose hyperbolic tangent is <B>number</B>.<BR><BR> <B>number</B> must obey the condition <B>-1</B> &lt; <B>number</B> &lt; <B>1</B>.<BR><BR><H2>Example</H2><B>ATANH(0)</B><BR> returns <B>0</B>.</BODY></HTML>";
		 else if(name.equals("AVEDEV")) return "<HTML><BODY><H1>AVEDEV</H1>Returns the average of the absolute deviations of values from their mean.<BR><BR>  <H2>Syntax</H2><B>AVEDEV(number1, number2, ... number30)</B><BR> <B>number1</B> to <B>number30</B> are up to 30 numbers or ranges containing numbers.<BR><BR> <B>AVEDEV</B> calculates the mean of the numbers, then the absolute (positive signed) deviation of each number from that mean.<BR><BR> It returns the average of those deviations.<H2>Example</H2><B>AVEDEV(1, 4, 7)</B><BR> returns <B>2</B>.<BR><BR> The mean is <B>4</B>, and the absolute deviations from the mean are <B>3</B>, <B>0</B>, <B>3</B> respectively.</BODY></HTML>";
		 else if(name.equals("AVERAGE")) return "<HTML><BODY><H1>AVERAGE</H1>Returns the average of the arguments, ignoring text.<BR><BR> <H2>Syntax</H2><B>AVERAGE(number1, number2, ... number30)</B><BR> <B>number1</B> to <B>number30</B> are up to 30 numbers or ranges containing numbers.<BR><BR><H2>Example</H2><B>AVERAGE(2, 6, 4)</B><BR> returns <B>4</B>, the average of the three numbers in the list.<BR><BR><B>AVERAGE(B1:B3)</B><BR> where cells <B>B1</B>, <B>B2</B>, <B>B3</B> contain <B>1</B>, <B>3</B>, and <B>apple</B> returns <B>2</B>, the average of <B>1</B> and <B>3</B>.<BR><BR> Text is ignored.</BODY></HTML>";
		 else if(name.equals("CEILING")) return "<HTML><BODY><H1>CEILING</H1>Returns a number rounded up to a multiple of another number.<BR><BR><H2>Syntax</H2><B>CEILING(number, mult)</B><BR> <B>number</B> is the number that is to be rounded up to a multiple of <B>mult</B>.<BR><BR> CEILING</B> rounds up to the multiple above (greater than or equal to) <B>number</B>.<BR><BR> <H2>Example</H2><B>CEILING(4, 3)</B><BR> returns <B>6</B>, because 2*3 = 6 is the next multiple of <B>3</B> above <B>4</B>.<BR><BR><B>CEILING(6, 3)</B><BR> returns <B>6</B>.</BODY></HTML>";
		 else if(name.equals("CHAR")) return "<HTML><BODY><H1>CHAR</H1>Returns a single text character, given a character code.<BR><BR> <H2>Syntax</H2><B>CHAR(number)</B><BR> <B>number</B> is the character code, in the range 1-255.<BR><BR> <B>CHAR</B> uses your system's character mapping (for example iso-8859-1, iso-8859-2, Windows-1252, Windows-1250) to determine which character to return.<BR><BR> Codes greater than 127 may not be portable.<BR><BR><H2>Example</H2><B>CHAR(72)</B><BR> returns <B>H</B>, representing character code 72.</BODY></HTML>";
		 else if(name.equals("CHOOSE")) return "<HTML><BODY><H1>CHOOSE </H1>Returns a value from a list, given an index number.<BR><BR><H2>Syntax</H2><B>CHOOSE(index, value1, value2, ... value30)</B><BR> <B>value1</B> ... <B>value30</B> are up to 30 values, each of which may be text, a number, a logical value, a reference or a formula.<BR><BR> <B>index</B> is an index number specifying which of <B>value1</B> ... <B>value30</B> to return; <B>1</B> returns <B>value1</B>, <B>2</B> returns <B>value2</B>, etc.<BR><BR><H2>Example</H2><B>CHOOSE(1, &quot;dog&quot;,&quot;cat&quot;)</B><BR> returns the text <B>dog</B>.<BR><BR><B>CHOOSE(2, &quot;dog&quot;, 65.4)</B><BR> returns the number <B>65.4</B>.<BR><BR><B>CHOOSE(3, &quot;dog&quot;, 65.4, B5)</B>  returns the <u>reference</u> <B>B5</B>, so that <B>=CHOOSE(3, &quot;dog&quot;, 65.4, B5)</B> in a cell shows the contents of cell B5 in that cell (it is equivalent to <B>=B5</B>).<BR><BR><B>SUM(CHOOSE(1, B4:B5, B6))</B><BR> returns the sum of the numbers in the range <B>B4B5</B>.<BR><BR><B>CHOOSE(2,SUM(B1:C1),SQRT(9))</B><BR> returns <B>3</B>, the square root of 9.</BODY></HTML>";
		 else if(name.equals("CLEAN")) return "<HTML><BODY><H1>CLEAN</H1>returns a text string with non-printable characters removed.<BR><BR> <H2>Syntax</H2><B>CLEAN(text)</B><BR> returns <B>text</B> with all non-printable characters removed.<BR><BR> Spaces are <u>not</u> removed.<BR><BR><H2>Example</H2>where cell A1 contains <B>=CHAR(7) &amp; &quot;cat&quot; &amp; CHAR(8)</B><BR><B>CLEAN(A1)</B><BR> returns <B>cat</B>.<BR><BR> The 2 non-printable characters are removed.<BR><BR><B>LEN(CLEAN(A1))</B><BR> returns <B>3</B>, the number of characters in <B>cat</B>. </BODY></HTML>";
		 else if(name.equals("COLUMN")) return "<HTML><BODY><H1>COLUMN </H1>Returns the column number(s), given a reference.<BR><BR> <H2>Syntax</H2><B>COLUMN(reference)</B><BR> returns the column number of <B>reference</B>, where <B>reference</B> is a reference to a cell.<BR><BR> If <B>reference</B> is omitted, the column number of the current cell (containing the formula) is returned.<BR><BR> If <B>reference</B> is a range of cells <u>and</u> the formula is entered as an array formula (by pressing Ctrl-Shift Enter rather than Enter) a single row array of column numbers is returned.<BR><BR><H2>Example</H2><B>COLUMN(B3)</B><BR> returns <B>2</B>.<BR><BR> Cell B3 is in the second column (column B).<BR><BR><B>COLUMN()</B><BR> if entered in cell C7, returns <B>3</B>.<BR><BR> Cell C7 is in the third column.<BR><BR><B>COLUMN(D2:F3)</B> (entered with the Enter key) returns <B>4</B>.<BR><BR> This is <u>not</u> an array formula, so the column number of the first cell D2 is returned.<BR><BR><B>COLUMN(D2:F3)</B> (entered with Ctrl-Shift-Enter) returns the single row array <B>{4, 5, 6}</B>, as this <u>is</u> an array formula.<BR><BR> If this formula is entered in cell A1, A1 will display <B>4</B>, B1 <B>5</B> and C1 <B>6</B>.</BODY></HTML>";
		 else if(name.equals("COLUMNS")) return "<HTML><BODY><H1>COLUMNS</H1>Returns the number of columns in a given reference.<BR><BR><H2>Syntax</H2><B>COLUMNS(reference)</B><BR> <B>reference</B> may be given either explicitly (eg <B>A3B5</B>) or by name (eg <B>myref</B>).<BR><BR> It is possible to define a name to represent more than one range (eg by entering <B>$A$1:$A$3,$C$1:$C$4</B> in the Assigned To box of the Insert - Names - Define... dialog).<BR><BR> In this case <B>COLUMNS</B> sums the number of columns in each range, irrespective of any duplication of columns.<BR><BR> <H2>Example</H2><B>COLUMNS(A3:B5)</B><BR> returns <B>2</B>; there are two columns in this range, namely columns A and B.<BR><BR><B>COLUMNS(G4:H4)</B><BR> returns <B>2</B>; there are two columns in this range, namely columns G and H.<BR><BR><B>COLUMNS(D8)</B><BR> returns <B>1</B>; <B>D8</B> is interpreted as a one cell range, with a single column (column D).<BR><BR><B>COLUMNS(myref)</B><BR> where <B>myref</B> has been defined as the multiple range <B>$A$1:$A$3,$C$1:$D$4</B>, returns <B>3</B>.</BODY></HTML>";
		 else if(name.equals("COMBIN")) return "<HTML><BODY><H1>COMBIN</H1>Returns the number of combinations of a subset of items.<BR><BR><H2>Syntax</H2><B>COMBIN(n, k)</B><BR> <B>n</B> is the number of items in the set.<BR><BR> <B>k</B> is the number of items to choose from the set.<BR><BR> <B>COMBIN</B> returns the number of ways to choose these items.<BR><BR> For example if there are 3 items A, B and C in a set, you can choose 2 items in 3 different ways, namely AB, AC and BC.<BR><BR> <B>COMBIN</B> implements the formula <B><i>n</i>!/(<i>k</i>!(<i>n</i>-<i>k</i>)!)</B><H2>Example</H2><B>COMBIN(3,2)</B><BR> returns <B>3</B>.</BODY></HTML>";
		 else if(name.equals("CONCATENATE")) return "<HTML><BODY><H1>CONCATENATE</H1>Combines several text strings into one string.<BR><BR> <H2>Syntax</H2><B>CONCATENATE(text1, text2, ... text30)</B><BR> returns up to 30 text strings <B>text1</B> - <B>text30</B>, joined together.<BR><BR> <B>text1</B> - <B>text30</B> may also be single cell references.<BR><BR> The ampersand operator <B>&amp;</B> may also be used to concatenate text in a formula, without the function.<BR><BR><H2>Example</H2><B>CONCATENATE(&quot;al&quot;, &quot;tog&quot;, &quot;ether&quot;)</B><BR> returns <B>altogether</B>.<BR><BR><B>&quot;al&quot; &amp; &quot;tog&quot; &amp; &quot;ether&quot;</B><BR> also returns <B>altogether</B>.<BR><BR><B>CONCATENATE(A1, A2)</B><BR> where cell A1 contains <B>key</B> and cell A2 contains <B>board</B>  returns <B>keyboard</B>.<BR><BR><B>CONCATENATE(ROUND(RAND()*10); ROUND(RAND()*10); ROUND(RAND()*10))</B><BR> returns the text string <B>xyz</B> where <B>x</B>,  <B>y</B>, <B>z</B> are three randomly independent digits, while <B>REPT(ROUND(RAND()*10); 3)</B><BR> returns <B>nnn</B> where <B>n</B> is a random digit repeated three times.<BR><BR>  Here Calc converts each number given by <B>ROUND(RAND()*10))</B> to text before concatenating.<BR><BR><B>CONCATENATE(&quot;Print Date &quot; , TEXT(TODAY(),&quot;dddd, d mmmm yyyy&quot;))</B><BR> returns <B>Print Date Thursday, 1 January 2009</B> (assuming today's date was Jan 1, 2009).<BR><BR> This example serves to demonstrate that you can combine functions in quite complex ways.<BR><BR> This example is made up of the date function <B>TODAY()</B> which returns the current date as a number (NOTE Jan 1, 2009 is represented as 39814) and the text function <B>TEXT()</B> which allows you to format the numeric representation of the date in a [useful] textual format.</BODY></HTML>";
		 else if(name.equals("COS")) return "<HTML><BODY><H1>COS</H1>Returns the cosine of the given angle (in radians).<BR><BR><H2>Syntax</H2><B>COS(angle)</B><BR> returns the (trigonometric) cosine of <B>angle</B>, the angle in radians.<BR><BR> To return the cosine of an angle in degrees, use the <B>RADIANS</B> function.<BR><BR><H2>Example</H2><B>COS(PI()/2)</B><BR> returns <B>0</B>, the cosine of <B>PI/2</B> radians<BR><B>COS(RADIANS(60))</B><BR> returns <B>0.5</B>, the cosine of <B>60</B> degrees</BODY></HTML>";
		 else if(name.equals("COSH")) return "<HTML><BODY><H1>COSH</H1>Returns the hyperbolic cosine of a number.<BR><BR><H2>Syntax</H2><B>COSH(number)</B><BR> returns the hyperbolic cosine of <B>number</B>.<BR><BR><H2>Example</H2><B>COSH(0)</B><BR> returns <B>1</B>, the hyperbolic cosine of <B>0</B>.</BODY></HTML>";
		 else if(name.equals("COUNT")) return "<HTML><BODY><H1>COUNT</H1>Counts the numbers in the list of arguments, ignoring text entries.<BR><BR><H2>Syntax</H2><B>COUNT(value1, value2, ... value30)</B><BR><B>value1</B> to <B>value30</B> are up to 30 values or ranges representing the values to be counted.<BR><BR><H2>Example</H2><B>COUNT(2, 4, 6, &quot;eight&quot;)</B><BR> returns <B>3</B>, because <B>2</B>, <B>4</B> and <B>6</B> are numbers (<B>&quot;eight&quot;</B> is text).<BR><BR><B>COUNT(B1:B3)</B><BR> where cells <B>B1</B>, <B>B2</B>, <B>B3</B> contain <B>1.1</B>, <B>2.2</B>, and <B>apple</B> returns <B>2</B>.</BODY></HTML>";
		 else if(name.equals("COUNTA")) return "<HTML><BODY><H1>COUNTA</H1>Counts the non-empty values in the list of arguments.<BR><BR><H2>Syntax</H2><B>COUNTA(value1, value2, ... value30)</B><BR><B>value1</B> to <B>value30</B> are up to 30 values or ranges representing the values to be counted.<BR><BR><H2>Example</H2><B>COUNTA(B1:B3)</B><BR> where cells <B>B1</B>, <B>B2</B>, <B>B3</B> contain <B>1.1</B>, <B>=NA()</B>, <B>apple</B>  returns <B>3</B>, because none of the cells in <B>B1:B3</B> are empty.<BR><BR><B>COUNTA(2, 4, &quot;dog&quot;)</B><BR> returns <B>3</B>, because <B>2</B>, <B>4</B> and <B>&quot;dog&quot;</B> are all numbers or text.<BR><BR><B>COUNTA(D1)</B><BR> where cell <B>D1</B> contains <B>=&quot;&quot;</B>, returns <B>1</B>, because <B>&quot;&quot;</B> is a string (although of zero length).</BODY></HTML>";
		 else if(name.equals("COUNTBLANK")) return "<HTML><BODY><H1>COUNTBLANK</H1>Returns the number of empty cells.<BR><BR> <H2>Syntax</H2><B>COUNTBLANK(range)</B><BR> Returns the number of empty cells in the cell range <B>range</B>.<BR><BR> A cell that contains blank text such as spaces, or even text with zero length such as returned by <B>=&quot;&quot;</B>, is not considered empty, even though it may appear empty.<BR><BR><H2>Example</H2><B>COUNTBLANK(A1:B2)</B><BR> returns <B>4</B> if cells A1, A2, B1 and B2 are all empty.<BR><BR><i>Advanced topic</i><BR><BR><B>SUMPRODUCT(TRIM(CLEAN(A1:B2))=&quot;&quot;)</B><BR> returns the count of cells that appear blank - that is, that are really empty or that contain blank text or zero length text.<BR><BR><B>SUMPRODUCT(ISTEXT(A1:B2),TRIM(CLEAN(A1:B2))=&quot;&quot;)</B><BR> returns the count of cells containing blank text and zero length text.</BODY></HTML>";
		 else if(name.equals("COUNTIF")) return "<HTML><BODY><H1>COUNTIF </H1>Counts the number of cells in a range that meet a specified condition.<BR><BR><H2>Syntax</H2><B>COUNTIF(test_range, condition)</B><BR> <B>test_range</B> is the range to be tested.<BR><BR> <B>condition</B> may be a number, such as <B>34.5</B><BR> an expression, such as <B>2/3</B> or <B>SQRT(B5)</B><BR> a text string <B>COUNTIF</B> counts those cells in  <B>test_range</B> that are equal to <B>condition</B>, unless <B>condition</B> is a text string that starts with a comparator <B>&gt;</B>, <B>&lt;</B>, <B>&gt;=</B>, <B>&lt;=</B>, <B>=</B>, <B>&lt;&gt;</B><BR> In this case <B>COUNTIF</B> compares those cells in <B>test_range</B> with the remainder of the text string (interpreted as a number if possible or text otherwise).<BR><BR> For example the condition “<B>&gt;4.5</B>” tests if the content of each cell is greater than the number 4.5, and the condition “<B>&lt;dog</B>” tests if the content of each cell would come alphabetically before the text <B>dog</B>.<BR><BR> Blank (empty) cells in <B>test_range</B> are ignored (they never satisfy the condition).<BR><BR> <B>condition</B> can only specify one single condition.<BR><BR><H2>Example</H2><B>COUNTIF(C2:C8, &quot;&gt;=20&quot;)</B><BR>returns the number of cells in <B>C2C8</B> whose contents are numerically greater than or equal to <B>20</B>.<BR><BR><B>COUNTIF(C2:C8, F1)</B><BR>where <B>F1</B> contains the text <B>&gt;=20</B>, returns the same number.<BR><BR><B>COUNTIF(C2:C8, &quot;&lt;&quot;&amp;F2)</B><BR>where <B>F2</B> contains <B>20</B> returns the number of cells in <B>C2:C8</B> whose contents are numerically less than <B>20</B>.<BR><BR> (<i>Advanced topic</i> <BR><BR>this works because the &amp; operator converts the content of <B>F2</B> to text, and concatenates it with &quot;&lt;&quot;, <B>COUNTIF</B> then converts it back to a number).<BR><BR><B>COUNTIF(A2:A8,  &quot;&gt;=P&quot;)</B><BR>returns the number of cells in <B>A2:A8</B> whose contents begin with the letter <B>P</B> or later in the alphabet.<BR><BR><B>COUNTIF(B2:B8, &quot;red&quot;)</B><BR>returns the number of cells in <B>B2:B8</B> containing <B>red</B>, but this number may depend on the option settings discussed above.<BR><BR><i>Advanced topic</i><BR><BR><B>COUNTIF(B2:B8, &quot;.+&quot;)</B>returns the number of cells in <B>B2:B8</B> containing one or more character, e.g. <B>not blank</B>, using the syntax of regular expressions.<BR><BR><B>SUMPRODUCT(B2:B8=&quot;Red&quot;)</B>.<BR><BR> returns the number of cells in <B>B2:B8</B> matching <B>Red</B>, with case sensitivity.</BODY></HTML>";
		 else if(name.equals("DATE")) return "<HTML><BODY><H1>DATE</H1>returns the date, given the year, month and day of the month.<BR><BR> <H2>Syntax</H2><B>DATE(year, month, day)</B><BR> returns the date, expressed as a date-time serial number.<BR><BR> <B>year</B> is an integer between 1583 and 9956 or between 0 and 99; <B>month</B> and <B>day</B> are integers.<BR><BR> If <B>month</B> and <B>day</B> are not within range for a valid date, the date will 'roll over', as shown below.<BR><BR><H2>Example</H2><B>DATE(2007, 11, 9)</B><BR> returns the date 9th November 2007 (as a date-time serial number).<BR><BR><B>DATE(2007, 12, 32)</B><BR> returns 1st January 2008 - the date rolls over, as 32nd December 2007 is not valid.<BR><BR><B>DATE(2004, 3, 0)</B><BR> returns 29th February 2004 - the date rolls over backwards, as 0th March 2004 is not valid.<BR><BR> 2004 was a leap year.<BR><BR><B>DATE(2006, 15, 8)</B><BR> returns 8th March 2007 - the date rolls over, as there are only 12 months in a year</BODY></HTML>";
		 else if(name.equals("DAY")) return "<HTML><BODY><H1>DAY</H1>Returns the day of a given date.<BR><BR> <H2>Syntax</H2><B>DAY(date)</B><BR> returns the day of <B>date</B> as a number (<B>1</B>-<B>31</B>).<BR><BR> <B>date</B>is a date-time serial number.<BR><BR><H2>Example</H2><B>DAY(DATE(2008,06,04)</B><BR> returns <B>4</B>.<BR><BR><B>DAY(A1)</B><BR> where cell A1 contains the date <B>23. Nov 83</B> as a date-time serial number, returns <B>23</B>.</BODY></HTML>";
		 else if(name.equals("DAYS360")) return "<HTML><BODY><H1>DAYS360</H1>Returns the number of days between two dates, using the 360 day year.<BR><BR><H2>Syntax</H2><B>DAYS360(enddate, startdate, method)</B><BR> <B>startdate</B> and <B>enddate</B> are the starting and ending dates (date-time serial numbers).<BR><BR> If <B>startdate</B> is earlier than <B>enddate</B>, the result will be negative.<BR><BR> <B>method</B> is an optional parameter; if <B>0</B> or omitted, the US National Association of Securities Dealers (NASD) method of calculation is used; if <B>1</B> (or &lt;&gt;0) the European method of calcuation is used.<BR><BR> The calculation assumes that all months have 30 days, so a year (12 months) has 360 days.<BR><BR><H2>Example</H2><B>DAYS360(DATE(2008,02,29), DATE(2008,08,31))</B><BR> returns <B>180</B>, that is, 6 months of 30 days.</BODY></HTML>";
		 else if(name.equals("DEGREES")) return "<HTML><BODY><H1>DEGREES</H1>Converts radians into degrees.<BR><BR><H2>Syntax</H2><B>DEGREES(radians)</B><BR> <B>radians</B> is the angle in radians to be converted to degrees.<BR><BR><H2>Example</H2><B>DEGREES(PI())</B><BR> returns 180 degrees</BODY></HTML>";
		 else if(name.equals("DEVSQ")) return "<HTML><BODY><H1>DEVSQ</H1>Returns the sum of squares of deviations from the mean.<BR><BR> <H2>Syntax</H2><B>DEVSQ(number1, number2, ... number30)</B><BR> <B>number1</B> to <B>number30</B> are up to 30 numbers or ranges containing numbers.<BR><BR> <B>DEVSQ</B> calculates the mean of all the numbers, then sums the squared deviation of each number from that mean.<H2>Example</H2><B>DEVSQ(1, 3, 5)</B><BR> returns <B>8</B>, calculated as (-2)<sup>2</sup> + 0 + (2)<sup>2</sup>.</BODY></HTML>";
		 else if(name.equals("DOLLAR")) return "<HTML><BODY><H1>DOLLAR</H1>Returns text representing a number in your local currency format.<BR><BR> <H2>Syntax</H2><B>DOLLAR(number, decimals)</B><BR> returns text representing <B>number</B> as currency.<BR><BR>  <B>decimals</B> (optional, assumed to be <B>2</B> if omitted) sets the number of decimal places.<BR><BR>  Tools - Options - Language Settings - Languages - 'Default Currency' sets the currency to be used (normally be the currency of your locale).<BR><BR> <H2>Example</H2><B>DOLLAR(255)</B><BR> returns <B>$255.00</B>, if your currency is US dollars.<BR><BR><B>DOLLAR(367.456, 2)</B><BR> returns <B>$367.46</B>, if your currency is US dollars.</BODY></HTML>";
		 else if(name.equals("EVEN")) return "<HTML><BODY><H1>EVEN</H1>Rounds a number up, away from zero, to the next even integer.<BR><BR><H2>Syntax</H2><B>EVEN(number)</B><BR> returns <B>number</B> rounded to the next even integer up, away from zero.<BR><BR> <H2>Example</H2><B>EVEN(2.3)</B><BR> returns <B>4</B>.<BR><BR><B>EVEN(2)</B><BR> returns <B>2</B>.<BR><BR><B>EVEN(0)</B><BR> returns <B>0</B>.<BR><BR><B>EVEN(-0.5)</B><BR> returns <B>-2</B>.</BODY></HTML>";
		 else if(name.equals("EXACT")) return "<HTML><BODY><H1>EXACT</H1>returns <B>TRUE</B> if two text strings are identical <H2>Syntax</H2><B>EXACT(text1, text2)</B><BR> returns <B>TRUE</B> if the text strings <B>text1</B> and <B>text2</B> are exactly the same (including case).<BR><BR><H2>Example</H2><B>EXACT(&quot;red car&quot;, &quot;red car&quot;)</B><BR> returns <B>TRUE</B>.<BR><BR><B>EXACT(&quot;red car&quot;, &quot;Red Car&quot;)</B><BR> returns <B>FALSE</B>.</BODY></HTML>";
		 else if(name.equals("EXP")) return "<HTML><BODY><H1>EXP</H1>Returns the mathematical constant ''e'' raised to the power of a number.<BR><BR><H2>Syntax</H2><B>EXP(number)</B><BR> returns <B><i>e</i><sup>number</sup></B>.<BR><BR><H2>Example</H2><B>EXP(1)</B><BR> returns <B>2.71828182845904</B>, the mathematical constant ''e'' to Calc's accuracy.</BODY></HTML>";
		 else if(name.equals("FACT")) return "<HTML><BODY><H1>FACT</H1>Returns the factorial of a number.<BR><BR> <H2>Syntax</H2><B>FACT(number)</B><BR> Returns <B>number!</B>, the factorial of <B>number</B>, calculated as <B>1*2*3*4* ... * number</B>.<BR><BR> <B>FACT(0)</B> returns <B>1</B> by definition.<BR><BR> <H2>Example</H2><B>FACT(3)</B><BR> returns <B>6</B>.<BR><BR><B>FACT(0)</B><BR> returns <B>1</B>.</BODY></HTML>";
		 else if(name.equals("FALSE")) return "<HTML><BODY><H1>FALSE </H1>Returns the logical value FALSE.<BR><BR> <H2>Syntax</H2><B>FALSE()</B><BR>The <B>FALSE()</B> function has no arguments, and always returns the logical value <B>FALSE</B>.<BR><BR><H2>Example</H2><B>FALSE()</B><BR> returns <B>FALSE</B><BR><BR><B>NOT(FALSE())</B><BR> returns  <B>TRUE</B></BODY></HTML>";
		 else if(name.equals("FIND")) return "<HTML><BODY><H1>FIND</H1>Returns the position of a string of text within another string.<BR><BR> <H2>Syntax</H2><B>FIND(findtext, texttosearch, startposition)</B><BR> returns the character position of the first occurrence of <B>findtext</B> within <B>texttosearch</B>.<BR><BR> <B>startposition</B> (optional) is the position from which the search starts.<BR><BR> The search is case-sensitive.<BR><BR> A failed search gives the <B>#VALUE!</B> error.<BR><BR><H2>Example</H2><B>FIND(&quot;yo&quot;, &quot;Yoyo&quot;)</B><BR> returns <B>3</B>.<BR><BR><B>FIND(&quot;cho&quot;, &quot;choochoo&quot;, 2)</B><BR> returns <B>5</B>.<BR><BR><B>FIND(&quot;xyz&quot;,&quot;abcdef&quot;,1)</B><BR> returns <B>#VALUE!</B>.<BR><BR> NOTE  This is an error condition, which must be 'handled' if used as the argument to another function.<BR><BR> <B>IF( FIND(&quot;xyz&quot;,&quot;abcdef&quot;,1) , &quot;Substring Present&quot;, &quot;ERR Missing Substring&quot; )</B><BR> returns <B>#VALUE!</B> which is not very useful, therefore we could use either <B>ISERROR()</B> or <B>ISNUMBER()</B> for example <B>IF( ISERROR( FIND(&quot;xyz&quot;,&quot;abcdef&quot;,1) ) , &quot;ERR Missing Substring&quot;, &quot;Substring Present&quot; )</B>.<BR><BR> returns <B>&quot;ERR Missing Substring&quot;</B> (... allowing the IF() to function, and not propagating the error from the FIND() function.<BR><BR> <B>IF( ISNUMBER( FIND(&quot;xyz&quot;,&quot;abcdef&quot;,1) ) , &quot;Substring Present&quot;, &quot;ERR Missing Substring&quot; )</B>.<BR><BR> returns <B>&quot;ERR Missing Substring&quot;</B> (... allowing the IF() to function, and not propagating the error from the FIND() function.<BR><BR> NOTE  In practice, it may be more maintainable to use ISNUMBER() to avoid negative logic, and it is more indicitive of the evaluation desired  if the substring has a position, then ISNUMBER() is TRUE, else ISNUMBER() is FALSE.</BODY></HTML>";
		 else if(name.equals("FLOOR")) return "<HTML><BODY><H1>FLOOR</H1>Returns a number rounded down to a multiple of another number.<BR><BR><H2>Syntax</H2><B>FLOOR(number, mult)</B><BR> <B>number</B> is the number that is to be rounded down to a multiple of <B>mult</B>.<H2>Example</H2><B>FLOOR(8, 3)</B><BR> returns <B>6</B>, because <B>2*3 = 6</B> is the first multiple of <B>3</B> below <B>8</B>.<BR><BR><B>FLOOR(6, 3)</B><BR> returns <B>6</B>.</BODY></HTML>";
		 else if(name.equals("FV")) return "<HTML><BODY><H1>FV</H1>Returns the future value of an initial sum with a subsequent stream of payments.<BR><BR><H2>Syntax</H2><B>FV(rate, numperiods, payment, presentvalue, type)</B><BR> <B>rate</B><BR> the (fixed) interest rate per period.<BR><BR> <B>numperiods</B><BR> the total number of payment periods in the term.<BR><BR> <B>payment</B><BR> the payment made each period.<BR><BR> If <B>presentvalue</B> is given, this may omitted (defaults to 0).<BR><BR> <B>presentvalue</B><BR> the lump sum payment at the start of the term (optional - defaults to 0).<BR><BR> With a loan, this would normally be the sum borrowed; with a bond this would generally be 0.<BR><BR> <B>type</B><BR> when payments are made (optional - defaults to 0) 0 - at the end of each period.<BR><BR> 1 - at the start of each period (including a payment at the start of the term).<BR><BR> The value of money is time-dependent; for example, $100 today would be worth $110 in a year if invested at a 10% interest rate.<BR><BR> <B>FV</B> returns the future value at the end of the term, of a lump sum payment (<B>presentvalue</B>) at the start of the term and a <B>payment</B> being made each period for <B>numperiods</B> periods, at fixed rate interest, compounded each period.<BR><BR><H2>Example</H2><B>FV(5%, 3, -1000, 0, 0)</B><BR> returns a future value of <B>3,152.50</B> in currency units.<BR><BR> You pay 1,000 at the end of each year for 3 years.<BR><BR> Assuming an interest rate of 5% you expect to receive 3,152.50 at the end of the term.<BR><BR> 1,000 is negative because you pay it.<BR><BR> The future value is positive because you receive it.<BR><BR><B>FV(7%, 10, -1400, 10000, 0)</B><BR> returns a future value of <B>-328.49</B> in currency units.<BR><BR> You borrow 10,000 at an interest rate of 7% and pay 1,400 at the end of each year for 10 years.<BR><BR> 10,000 is positive because you have it.<BR><BR> 1,400 is negative because you pay it.<BR><BR> The future value is negative because this is the amount of money you owe at the end of the term.<BR><BR><B>FV(7%, 1; 0, 10000, 0)</B><BR> returns a future value of <B>-10,700</B> in currency units.<BR><BR> You borrow 10,000 at an interest rate of 7% and don't pay any of it back.<BR><BR> After 1 year you owe 10,700.</BODY></HTML>";
		 else if(name.equals("HLOOKUP")) return "<HTML><BODY><H1>HLOOKUP </H1>Returns a value from a table row, in the column found by lookup in the first row.<BR><BR><H2>Syntax</H2><B>HLOOKUP(lookupvalue, datatable, rowindex, mode)</B><BR> <B>lookupvalue</B> is a value (number, text or logical value) to look up in the top row of the range/array <B>datatable</B>.<BR><BR> When a value is matched in the top row, <B>HLOOKUP</B> returns the corresponding value (in the same column) in the <B>rowindex</B><sup>th</sup> row of <B>datatable</B>, where <B>rowindex</B> = 1 is the top row.<BR><BR> If <B>mode</B> is <B>0</B> or <B>FALSE</B>, the top row of  <B>datatable</B> may be unordered, and the first exact match is found (searching left to right).<BR><BR> If <B>mode</B> is 1 or <B>TRUE</B>, or is omitted, the top row of  <B>datatable</B> must be sorted, with numbers in ascending order appearing before text values in alphabetic order.<BR><BR> <B>HLOOKUP</B> decides where in the top row <B>lookupvalue</B> would appear.<BR><BR> If there is an exact match, that is the column found; if there is more than one exact match, the column found is <u>not necessarily the leftmost</u>.<BR><BR> If there is no exact match, the column to the left of where <B>value</B> would appear in the top row is found; the <B>#N/A</B> error results if that column is not in the table.<H2>Examples</H2>In these examples, cells A1, B1, C1, D1, E1 contain <B>3</B>, <B>5</B>, <B>cat</B>, <B>mat</B>, <B>matter</B>, and cellsA2, B2, C2, D2, E2 contain <B>A</B>, <B>B</B>, <B>C</B>, <B>D</B>, <B>E</B>.<BR><BR><B>HLOOKUP(3, A1:E2, 2, 0)</B><BR> returns <B>A</B>.<BR><BR> Cell A1 in the top row matches <B>3</B>.<BR><BR> The contents of the corresponding cell on the 2<sup>nd</sup> row (that is, A2) are returned.<BR><BR> The top row happens to be sorted, but this is not necessary in mode <B>0</B>.<BR><BR><B>HLOOKUP(4, A1:E2, 2, 0)</B><BR> returns <B>#N/A</B>.<BR><BR> There is no match for <B>4</B>.<BR><BR><B>HLOOKUP(&quot;CAT&quot;, A1:E2, 2, 0)</B><BR> returns <B>C</B>.<BR><BR> The difference between lower and upper case is ignored, so <B>CAT</B> matches <B>cat</B>.<BR><BR><B>HLOOKUP(&quot;c.<BR><BR>t&quot;, A1:E2, 2, 0)</B><BR> returns <B>C</B> if regular expressions are enabled (and <B>#N/A</B> if not).<BR><BR> The dot '.<BR><BR>' stands for 'any single character' in a regular expression, so <B>c.<BR><BR>t</B> matches <B>cat</B>.<BR><BR><B>HLOOKUP(&quot;.<BR><BR>at&quot;, A1:E2, 2, 0)</B><BR> returns <B>C</B> if regular expressions are enabled.<BR><BR> <B>cat</B> matches; so does <B>mat</B>, but the leftmost match is always found in mode <B>0</B>.<BR><BR><B>HLOOKUP(&quot;at&quot;, A1:E2, 2, 0)</B><BR> returns <B>#N/A</B> if '<i>Search criteria = and &lt;&gt; must apply to whole cells</i>' is enabled and <B>C</B> otherwise.<BR><BR> <B>at</B> does not match any whole cell contents, but it matches part of <B>cat</B>.<BR><BR><B>HLOOKUP(3, A1:E2, 2, 1)</B><BR>returns <B>A</B>.<BR><BR> Cell A1 in the top row matches <B>3</B>.<BR><BR> The top row must be sorted in mode <B>1</B>, with text coming after numbers.<BR><BR> <B>matter</B> follows <B>mat</B> because although the first letters are the same, <B>matter</B> has more letters.<BR><BR><B>HLOOKUP(4, A1:E2, 2, 1)</B><BR> returns <B>A</B>.<BR><BR> <B>4</B> would appear between <B>3</B> and <B>5</B> in the top row, so the position to the left is found.<BR><BR><B>HLOOKUP(1, A1:E2, 2, 1)</B><BR> returns <B>#N/A</B>.<BR><BR> <B>1</B> would appear before <B>3</B> in the top row, and there is no position to the left of that in the table.<BR><BR><B>HLOOKUP(7, A1:E2, 2, 1)</B><BR> returns <B>B</B>.<BR><BR> <B>7</B> would appear between <B>5</B> and <B>cat</B> in the top row, so the position to the left is found.<BR><BR><B>HLOOKUP(&quot;apple&quot;, A1:E2, 2, 1)</B><BR> returns <B>B</B>.<BR><BR> <B>apple</B> would appear between <B>5</B> and <B>cat</B> in the top row, so the position to the left is found.<BR><BR><B>HLOOKUP(&quot;mate&quot;, A1:E2, 2, 1)</B><BR> returns <B>D</B>.<BR><BR> <B>mate</B> would appear between <B>mat</B> and <B>matter</B> in the top row, so the position to the left is found.<BR><BR><B>HLOOKUP(&quot;rat&quot;, A1:E2, 2, 1)</B><BR> returns <B>E</B>.<BR><BR> <B>rat</B> would appear after <B>matter</B> in the top row, so the position to the left is found.<BR><BR><B>HLOOKUP(&quot;at&quot;, A1:E2, 2, 1)</B><BR> returns <B>B</B>, even if '<i>Search criteria = and &lt;&gt; must apply to whole cells</i>' is disabled.<BR><BR> In this case the match between <B>at</B> and <B>cat</B> is ignored in favour of treating <B>at</B> as a word to come between <B>5</B> and <B>cat</B>.</BODY></HTML>";
		 else if(name.equals("HOUR")) return "<HTML><BODY><H1>HOUR</H1>Returns the hour of a given time.<BR><BR> <H2>Syntax</H2><B>HOUR(time)</B><BR> returns the hour of <B>time</B> as a number, <B>0</B> - <B>23</B>.<BR><BR> <B>time</B> is a date-time serial number.<BR><BR><H2>Example</H2><B>HOUR(TIME(21,30,15))</B><BR> returns <B>21</B>.<BR><BR><B>HOUR(A1)</B><BR> where cell A1 contains the time <B>9:25:10</B> as a date-time serial number, returns <B>9</B>.</BODY></HTML>";
		 else if(name.equals("HYPERLINK")) return "<HTML><BODY><H1>HYPERLINK</H1>Sets a cell to open a hyperlink when clicked.<BR><BR>  <H2>Syntax</H2><B>HYPERLINK(linkaddress, celltext)</B><BR> A cell containing a <B>HYPERLINK</B> function will open a hyperlink when the cell is clicked.<BR><BR> <B>linkaddress</B> is the address (as text) that is opened.<BR><BR> <B>celltext</B> is the text displayed in the cell.<BR><BR> If <B>celltext</B> is omitted, <B>linkaddress</B> is displayed in the cell.<BR><BR><H2>Example</H2><B>=HYPERLINK(&quot;http://www.example.org&quot;)</B><BR> displays <B>http://www.example.org</B> in the cell and opens the hyperlink <B>http://www.example.org</B> when clicked.<BR><BR><B>=HYPERLINK(&quot;http://www.example.org&quot;, &quot;Click here&quot;)</B><BR> displays <B>Click here</B> in the cell and opens the hyperlink <B>http://www.example.org</B> when clicked.<BR><BR><B>=HYPERLINK(&quot;agora://T 2 11/30/13&quot;, &quot;T 2 11/30/13&quot;)</B><BR> displays <B>T 2 11/30/13</B> in the cell and opens the business object <B>T 2 11/30/13</B> when clicked.<BR><BR></BODY></HTML>";
		 else if(name.equals("IF")) return "<HTML><BODY><H1>IF </H1>Returns one of two values, depending on a test condition.<BR><BR><H2>Syntax</H2><B>IF(test, value1, value2)</B>where <B>test</B> is or refers to a logical value or expression that returns a logical value (<B>TRUE</B> or <B>FALSE</B>).<BR><BR> <B>value1</B> is the value that is returned by the function if  <B>test</B> yields <B>TRUE.<BR><BR></B><BR> <B>value2</B> is the value that is returned by the function if  <B>test</B> yields <B>FALSE</B>.<BR><BR>If <B>value2</B> is omitted it is assumed to be <B>FALSE</B>; if <B>value1</B> is also omitted it is assumed to be <B>TRUE</B>.<BR><BR><H2>Example</H2><B>IF(A1&gt;5, 100, &quot;too small&quot;)</B>  returns the number 100 if A1 is greater than 5, and the text &quot;too small&quot; otherwise.<BR><BR><B>IF(1&gt;2, &quot;nonsense&quot;)</B><BR> returns <B>FALSE</B> - because <B>value2</B> has been omitted and 1 is not greater than 2.<BR><BR><B>IF(2&gt;1)</B><BR> returns <B>TRUE</B> - because both <B>value1</B> and <B>value2</B> have been omitted and 2 is more than 1.<BR><BR><B>IF(1=2, 1/0, SQRT(4))</B><BR> returns <B>2</B>, the square root of <B>4</B>.<BR><BR> <B>IF()</B> only calculates the value chosen - in this case <B>1/0</B> would give a #DIV/0! error, but is not calculated.</BODY></HTML>";
		 else if(name.equals("INDEX")) return "<HTML><BODY><H1>INDEX</H1>Returns a value from a table, given a row and column number.<BR><BR><H2>Syntax</H2><B>INDEX(datatable, row, column, areanumber)</B><BR> returns the value at position <B>row</B>, <B>column</B> in the range or array <B>datatable</B>.<BR><BR> If <B>datatable</B> has multiple ranges then <B>areanumber</B> specifies which is to be used.<BR><BR> <B>areanumber</B> is optional and defaults to <B>1</B>.<BR><BR> If <B>datatable</B> has a single column, this syntax may be used<B>INDEX(datatable, row)</B>.<BR><BR> If <B>datatable</B> has a single row, this syntax may be used<B>INDEX(datatable, column)</B>.<BR><BR><H2>Example</H2>If cells <B>B1</B>, <B>B2</B>, <B>B3</B> contain <B>5</B>, <B>red</B> and <B>6</B> and cells <B>C1</B>, <B>C2</B>, <B>C3</B> contain <B>TRUE</B>, <B>3</B> and <B>blue</B><BR>-<B>INDEX(B1:C3, 1, 1)</B><BR> returns <B>5</B>.<BR><BR><B>INDEX(B1:C3, 3, 2)</B><BR> returns <B>blue</B>.<BR><BR><B>INDEX(B1:B3, 2)</B><BR> returns <B>red</B>.<BR><BR><B>INDEX(B1:C2, 1, 2)</B><BR> returns <B>TRUE</B>.<BR><BR><B>INDEX(B3:C3, 2)</B><BR> returns <B>blue</B>.</BODY></HTML>";
		 else if(name.equals("INDIRECT")) return "<HTML><BODY><H1>INDIRECT </H1>Returns a reference, given a text string.<BR><BR> <H2>Syntax</H2><B>INDIRECT(textref, type)</B><BR> <B>textref</B> is a text string specifying the reference to be returned; the reference may be to a single cell or to a range.<BR><BR> The reference may then be used in formulas or functions requiring a reference - see the examples below.<BR><BR> <B>type</B> is an optional number; if <B>0</B>, <B>textref</B> is taken to be in R1C1 notation, and otherwise (or if omitted) <B>textref</B> is taken to be in the usual A1 notation.<BR><BR> A named reference is recognised with either <B>type</B>.<BR><BR><H2>Example</H2><B>=INDIRECT(&quot;B2&quot;)</B><BR> (in a cell) returns the contents of cell B2.<BR><BR> <B>INDIRECT(&quot;B2&quot;)</B> returns a <u>reference</u> to cell B2, so this is the same as <B>=B2</B>.<BR><BR><B>=INDIRECT(&quot;B&quot; &amp; &quot;2&quot;)</B><BR> also returns the contents of cell B2.<BR><BR> <B>&quot;B&quot; &amp; &quot;2&quot;</B> becomes the text string <B>&quot;B2&quot;</B>.<BR><BR><B>=INDIRECT(D3)</B><BR> where cell D3 contains the text <B>B2</B> returns the contents of cell B2.<BR><BR><B>=SUM(INDIRECT(&quot;A1:C3&quot;))</B><BR> returns the sum of the numbers in A1:C3.<BR><BR><B>=INDIRECT(&quot;B2&quot;, 99)</B><BR> returns the contents of cell B2.<BR><BR> The <B>type</B> is non-zero, so <B>B2</B> is evaluated as the usual A1 notation.<BR><BR><B>=INDIRECT(&quot;R2C3&quot;, 0)</B><BR> returns the contents of cell C2.<BR><BR> The <B>type</B> is zero, so <B>R2C3</B> is evaluated as R1C1 notation.<BR><BR><B>=INDIRECT(&quot;R[3]C[1]&quot;, 0)</B><BR> entered in cell B1, returns the contents of cell C4.<BR><BR> The <B>type</B> is zero, so <B>R[3]C[1]</B> is evaluated as R1C1 notation, in this case relative to cell B1 3 rows down and 1 column across to yield a reference to cell C4.</BODY></HTML>";
		 else if(name.equals("INT")) return "<HTML><BODY><H1>INT</H1>Rounds a number down to the nearest integer.<BR><BR><H2>Syntax</H2><B>INT(number)</B><BR> returns <B>number</B> rounded down to the nearest integer.<BR><BR> Negative numbers round down to the integer below <B>-1.3</B> rounds to <B>-2</B>.<BR><BR><H2>Example</H2><B>INT(5.7)</B><BR> returns <B>5</B><B>INT(-1.3)</B><BR> returns <B>-2</B>.</BODY></HTML>";
		 else if(name.equals("IRR")) return "<HTML><BODY><H1>IRR</H1>Calculates the internal rate of return of a series of cash flows.<BR><BR><H2>Syntax</H2><B>IRR(payments, guess)</B><BR> <B>payment</B> is a range containing the payments made or received, at regular intervals.<BR><BR>  <B>guess</B> (optional, defaults to 10%) is a first guess at the rate.<BR><BR> <B>IRR</B> iterates to find the rate of return which gives a zero net present value for the cash flows.<BR><BR> At least one of the cash flows must be negative and at least one positive - to allow the net present value to be zero.<BR><BR> The rate of return is per period, and interest is compounded each period.<BR><BR> The payments are assumed to arise at the start of each period;  the order in which the payments are given is important.<BR><BR> <H2>Example</H2><B>IRR(A1:A4)</B><BR> where A1:A4 contain -5000, 1000, 2000, 3000, returns approximately <B>8.21%</B>.</BODY></HTML>";
		 else if(name.equals("ISBLANK")) return "<HTML><BODY><H1>ISBLANK </H1>Tests if the cell is blank (empty).<BR><BR><H2>Syntax</H2><B>ISBLANK(cell)</B><BR>Returns <B>TRUE</B> if <B>cell</B> is a blank (empty) cell, and <B>FALSE</B> otherwise.<BR><BR> Cells containing a formula or a error return <B>FALSE</B>.<BR><BR><H2>Example</H2><B>ISBLANK(D2)</B><BR> returns <B>TRUE</B> if D2 is an empty cell, and <B>FALSE</B> if D2 contains a number, text, <B>TRUE</B>, <B>FALSE</B>, a formula or an error.</BODY></HTML>";
		 else if(name.equals("ISERROR")) return "<HTML><BODY><H1>ISERROR </H1>Tests for any error value.<BR><BR><H2>Syntax</H2><B>ISERROR(value)</B><BR>Returns <B>TRUE</B> if <B>value</B> refers to or evaluates to any error value, including <B>#N/A</B>, and <B>FALSE</B> otherwise.<BR><BR>Use the <B>ISERR</B> function to test for any errors <u>except</u> <B>#N/A</B>.<BR><BR><H2>Example</H2><B>ISERROR(SQRT(-1))</B><BR> returns <B>TRUE</B>, because taking the squareroot of -1 is an error.<BR><BR><B>ISERROR(C5)</B><BR> where C5 contains <B>123</B>, returns <B>FALSE</B>, because <B>123</B> is not an error.<BR><BR><B>ISERROR(NA())</B><BR> returns <B>TRUE</B>, because <B>NA()</B> returns the <B>#N/A</B> error.</BODY></HTML>";
		 else if(name.equals("ISEVEN")) return "<HTML><BODY><H1>ISEVEN </H1>Returns <B>TRUE</B> if the value is an even number, or <B>FALSE</B> if the value is odd.<BR><BR><H2>Syntax</H2><B>ISEVEN(value)</B><BR><B>value</B> is the value to be checked.<BR><BR>If <B>value</B> is not an integer any digits after the decimal point are ignored.<BR><BR> The sign of <B>value</B> is also ignored.<BR><BR><H2>Example</H2><B>ISEVEN(48)</B><BR> returns <B>TRUE</B>.<BR><BR><B>ISEVEN(33)</B><BR> returns <B>FALSE</B>.<BR><BR><B>ISEVEN(0)</B><BR> returns <B>TRUE</B>.<BR><BR><B>ISEVEN(3.999)</B><BR> returns <B>FALSE</B>.<BR><BR> Ignoring digits after the decimal point gives 3, which is not EVEN.<BR><BR><B>ISEVEN(-2.1)</B><BR> returns <B>TRUE</B>.<BR><BR> Ignoring the sign and digits after the decimal point gives 2, which is EVEN.</BODY></HTML>";
		 else if(name.equals("ISLOGICAL")) return "<HTML><BODY><H1>ISLOGICAL </H1>Tests if a cell contains a logical value, <B>TRUE</B> or <B>FALSE</B>.<BR><BR><H2>Syntax</H2><B>ISLOGICAL(value)</B><BR> Returns <B>TRUE</B> if <B>value</B> is either <B>TRUE</B> or <B>FALSE</B>, and <B>FALSE</B> otherwise.<BR><BR><H2>Example</H2><B>ISLOGICAL(D5)</B><BR> where D5 contains <B>FALSE</B>, returns <B>TRUE</B>, because D5 contains a logical value.<BR><BR><B>ISLOGICAL(123)</B><BR> returns <B>FALSE</B>, because <B>123</B> is a number, not a logical value.</BODY></HTML>";
		 else if(name.equals("ISNA")) return "<HTML><BODY><H1>ISNA </H1>Tests for the <B>#N/A</B> (Not Available) error value.<BR><BR> <H2>Syntax</H2><B>ISNA(value)</B><BR>Returns <B>TRUE</B> if <B>value</B> is or refers to the <B>#N/A</B> (Not Available) error and <B>FALSE</B> otherwise.<BR><BR><H2>Example</H2><B>ISNA(NA())</B><BR> returns <B>TRUE</B>, because <B>NA()</B> returns the <B>#N/A</B> error.<BR><BR><B>ISNA(1/0)</B><BR> returns <B>FALSE</B>, because <B>1/0</B> is a <B>#DIV/0!</B> error, not a <B>#N/A</B> error.<BR><BR><B>ISNA(A1)</B><BR> where A1 contains <B>&quot;dog&quot;</B>, returns <B>FALSE</B>, because <B>&quot;dog&quot;</B> is text, not an error.</BODY></HTML>";
		 else if(name.equals("ISNONTEXT")) return "<HTML><BODY><H1>ISNONTEXT </H1>Tests if a cell contains no text.<BR><BR><H2>Syntax</H2><B>ISNONTEXT(value)</B><BR> Returns <B>TRUE</B> unless <B>value</B> is or refers to text, in which case it returns <B>FALSE</B>.<BR><BR> <B>ISNONTEXT(value)</B> is equivalent to <B>NOT(ISTEXT(value))</B>.<BR><BR><H2>Example</H2><B>ISNONTEXT(123)</B><BR> returns <B>TRUE</B>.<BR><BR><B>ISNONTEXT(C2)</B><BR> where cell C2 contains <B>cat</B>, returns <B>FALSE</B>.<BR><BR><B>ISNONTEXT(C3)</B><BR> where cell C3 contains <B>=1/0</B>, returns <B>TRUE</B>, because <B>=1/0</B> returns an error value, not text.<BR><BR><B>ISNONTEXT(C4)</B><BR> where C4 is an empty cell, returns <B>TRUE</B> (an empty cell contains no text).</BODY></HTML>";
		 else if(name.equals("ISNUMBER")) return "<HTML><BODY><H1>ISNUMBER </H1>Tests if a cell contains a number.<BR><BR><H2>Syntax</H2><B>ISNUMBER(value)</B><BR> Returns <B>TRUE</B> if <B>value</B> is a number or logical value and <B>FALSE</B> otherwise.<BR><BR> <B>ISNUMBER</B> currently (OOo2.3) considers the logical values <B>TRUE</B> and <B>FALSE</B> as numbers.<H2>Example</H2><B>ISNUMBER(123)</B><BR> returns <B>TRUE</B>.<BR><BR><B>ISNUMBER(“dog”)</B><BR> returns <B>FALSE</B>.<BR><BR><B>ISNUMBER(D5)</B><BR> where D5 contains <B>99</B>, returns <B>TRUE</B>, because D5 contains a  number.</BODY></HTML>";
		 else if(name.equals("ISODD")) return "<HTML><BODY><H1>ISODD </H1>Returns <B>TRUE</B> if the value is an odd number, or <B>FALSE</B> if the value is even.<BR><BR><H2>Syntax</H2><B>ISODD(value)</B><BR><B>value</B> is the value to be checked.<BR><BR>If <B>value</B> is not an integer any digits after the decimal point are ignored.<BR><BR> The sign of <B>value</B> is also ignored.<BR><BR><H2>Example</H2><B>ISODD(33)</B><BR> returns <B>TRUE</B>.<BR><BR><B>ISODD(48)</B><BR> returns <B>FALSE</B>.<BR><BR><B>ISODD(3.999)</B><BR> returns <B>TRUE</B>.<BR><BR> Ignoring digits after the decimal point gives 3, which is odd.<BR><BR><B>ISODD(-3.1)</B><BR> returns <B>TRUE</B>.<BR><BR> Ignoring the sign and digits after the decimal point gives 3, which is odd.</BODY></HTML>";
		 else if(name.equals("ISREF")) return "<HTML><BODY><H1>ISREF </H1>Tests if the argument is a reference to a cell or range of cells.<BR><BR><H2>Syntax</H2><B>ISREF(value)</B><BR> Returns <B>TRUE</B> if <B>value</B> is a reference to a cell or range of cells and <B>FALSE</B> otherwise.<BR><BR><H2>Example</H2><B>ISREF(C5)</B><BR> returns <B>TRUE</B>, because C5 refers to a cell.<BR><BR><B>ISREF(A1B3)</B><BR> returns <B>TRUE</B>, because <B>A1B3</B> refers to a range of cells.<BR><BR><B>ISREF(&quot;A5&quot;)</B><BR> returns <B>FALSE</B>, because <B>&quot;A5&quot;</B> is text, not a cell reference.<BR><BR><B>ISREF(NA())</B><BR> returns <B>FALSE</B>, because <B>NA()</B> is an error, not a cell reference.<BR><BR><B>ISREF(A9999999)</B><BR> returns <B>FALSE</B>, because cell <B>A9999999</B> does not exist.<BR><BR><B>ISREF(range1)</B><BR> where <B>range1</B> is the named range <B>A1B3</B>, returns <B>TRUE</B>.<BR><BR><B>ISREF(range2)</B><BR> where <B>range2</B> is not defined, returns the <B>#NAME?</B> error<B>ISREF(INDIRECT(C1))</B><BR> where cell C1 contains the text <B>&quot;D1&quot;</B>, returns <B>TRUE</B>, because <B>INDIRECT</B> returns a reference.</BODY></HTML>";
		 else if(name.equals("ISTEXT")) return "<HTML><BODY><H1>ISTEXT </H1>Tests if a cell contains text.<BR><BR><H2>Syntax</H2><B>ISTEXT(value)</B><BR> Returns <B>TRUE</B> if <B>value</B> is or refers to text, and <B>FALSE</B> otherwise.<BR><BR><H2>Example</H2><B>ISTEXT(“dog”)</B><BR> returns <B>TRUE</B>.<BR><BR><B>ISTEXT(C2)</B><BR> where cell C2 contains <B>cat</B> returns <B>TRUE</B>.<BR><BR><B>ISTEXT(C3)</B><BR> where cell C3 contains <B>=NA()</B> returns <B>FALSE</B>, because <B>NA()</B> returns an error value, not text.<BR><BR><B>ISTEXT(C4)</B><BR> where C4 is an empty cell returns <B>FALSE</B> (an empty cell contain no text).</BODY></HTML>";
		 else if(name.equals("LARGE")) return "<HTML><BODY><H1>LARGE</H1>Returns the n<sup>th</sup> largest value in a list of numbers.<BR><BR><H2>Syntax</H2><B>LARGE(numberlist, n)</B><BR> returns the <B>n</B><sup>th</sup> largest number within the (unordered) range or array of numbers <B>numberlist</B>.<BR><BR><H2>Example</H2><B>LARGE(B1:B4, 3)</B><BR> where cells <B>B1</B>, <B>B2</B>, <B>B3</B>, <B>B4</B> contain <B>4</B>, <B>7</B>, <B>5</B>,and <B>8</B>, returns <B>5</B>.<BR><BR> The highest number is <B>8</B>, then <B>7</B>, then in third place <B>5</B>.</BODY></HTML>";
		 else if(name.equals("LEFT")) return "<HTML><BODY><H1>LEFT</H1>Returns text from the left side of a text string.<BR><BR><H2>Syntax</H2><B>LEFT(text, number)</B><BR> returns <B>number</B> characters from the left side of the text <B>text</B>.<BR><BR> <B>number</B> defaults to <B>1</B> if omitted.<BR><BR><H2>Example</H2><B>LEFT(&quot;output&quot;, 3)</B><BR> returns <B>out</B>.</BODY></HTML>";
		 else if(name.equals("LEN")) return "<HTML><BODY><H1>LEN</H1>Returns the length of a text string.<BR><BR> <H2>Syntax</H2><B>LEN(text)</B><BR> returns the number of characters in the text <B>text</B>, including spaces.<BR><BR><H2>Example</H2><B>LEN(&quot;red car&quot;)</B><BR> returns <B>7</B>.<BR><BR><B>LEN(123.4)</B><BR> returns <B>5</B> (numbers are converted to text).</BODY></HTML>";
		 else if(name.equals("LN")) return "<HTML><BODY><H1>LN</H1>Returns the natural logarithm of a number.<BR><BR> <H2>Syntax</H2><B>LN(number)</B><BR> returns the natural logarithm (the logarithm to base ''e'') of <B>number</B>, that is the power of ''e'' necessary to equal <B>number</B>.<BR><BR> The mathematical constant ''e'' is approximately <B>2.71828182845904</B>.<BR><BR><H2>Example</H2><B>LN(3)</B><BR> returns the natural logarithm of <B>3</B> (approximately <B>1.0986</B>).<BR><BR><B>LN(EXP(321))</B><BR> returns <B>321</B>.</BODY></HTML>";
		 else if(name.equals("LOG")) return "<HTML><BODY><H1>LOG</H1>Returns the logarithm of a number to the specified base.<BR><BR><H2>Syntax</H2><B>LOG(number, base)</B><BR> returns the logarithm to base <B>base</B> of <B>number</B>.<BR><BR><H2>Example</H2><B>LOG(10, 3)</B><BR> returns the logarithm to base <B>3</B> of <B>10</B> (approximately <B>2.0959</B>).<BR><BR><B>LOG(7^4, 7)</B><BR> returns <B>4</B>.</BODY></HTML>";
		 else if(name.equals("LOG10")) return "<HTML><BODY><H1>LOG10</H1>Returns the base-10 logarithm of a number.<BR><BR><H2>Syntax</H2><B>LOG10(number)</B><BR> returns the logarithm to base 10 of <B>number</B>.<BR><BR><H2>Example</H2><B>LOG10(5)</B><BR> returns the base-10 logarithm of <B>5</B> (approximately <B>0.69897</B>).</BODY></HTML>";
		 else if(name.equals("LOOKUP")) return "<HTML><BODY><H1>LOOKUP </H1>Returns a value from a single-cell-wide table, in a position found by lookup in another table.<BR><BR><H2>Syntax</H2><B>LOOKUP(lookupvalue, searchtable, resulttable)</B><BR> <B>lookupvalue</B> is a value (number, text or logical value) to look up in the single row or single column range/array <B>searchtable</B>.<BR><BR> <B>searchtable</B> must be sorted, with numbers in ascending order appearing before text values in alphabetic order.<BR><BR> <B>resulttable</B> is a range/array of the same size as <B>searchtable</B>.<BR><BR> <B>LOOKUP</B> returns the value in <B>resulttable</B> in the position where the match was found in <B>searchtable</B>.<BR><BR> <B>LOOKUP</B> decides where in <B>searchtable</B> <B>lookupvalue</B> would appear.<BR><BR> If there is an exact match, that is the position found; if there is more than one exact match, the position found is <u>not necessarily the leftmost/ topmost</u>.<BR><BR> If there is no exact match, the position just before where <B>lookupvalue</B> would appear is found; the <B>#N/A</B> error results if that position is not in <B>searchtable</B>.<H2>Examples</H2>In these examples, cells A1, B1, C1, D1, E1 contain <B>3</B>, <B>5</B>, <B>cat</B>, <B>mat</B>, <B>matter</B>, and cellsA3, B3, C3, D3, E3 contain <B>A</B>, <B>B</B>, <B>C</B>, <B>D</B>, <B>E</B>.<BR><BR><B>LOOKUP(3, A1:E1, A3E3)</B><BR> returns <B>A</B>.<BR><BR> Cell A1 matches <B>3</B>.<BR><BR> The contents of the corresponding cell in A3E3 are returned.<BR><BR> <B>LOOKUP(7, A1:E1, A3E3)</B><BR> returns <B>B</B>.<BR><BR> <B>7</B> would appear between <B>5</B> and <B>cat</B>, so the position to the left is found.<BR><BR><B>LOOKUP(1, A1:E1, A3E3)</B><BR> returns <B>#N/A</B>.<BR><BR> <B>1</B> would appear before <B>3</B> in the top row, and there is no position to the left of that in the table.<BR><BR><B>LOOKUP(&quot;CAT&quot;, A1:E1, A3E3)</B><BR> returns <B>C</B>.<BR><BR> The difference between lower and upper case is ignored, so <B>CAT</B> matches <B>cat</B>.<BR><BR><B>LOOKUP(&quot;mate&quot;, A1:E1, A3E3)</B><BR> returns <B>D</B>.<BR><BR> <B>mate</B> would appear between <B>mat</B> and <B>matter</B>, so the position to the left is found.<BR><BR><i>Advanced topic regular expressions</i><BR><BR><B>LOOKUP(&quot;c.<BR><BR>t&quot;, A1:E1, A3E3)</B><BR> returns <B>C</B> if regular expressions are enabled (and <B>#N/A</B> if not).<BR><BR> The dot '.<BR><BR>' stands for 'any single character' in a regular expression, so <B>c.<BR><BR>t</B> matches <B>cat</B>.<BR><BR><B>LOOKUP(&quot;.<BR><BR>at&quot;, A1:E1, A3E3)</B><BR> <B>&quot;.<BR><BR>at&quot;</B> matches both <B>cat</B> and <B>mat</B> if regular expressions are enabled.<BR><BR> It also matches <B>matter</B> if whole cell matching is off.<BR><BR> It is not possible to predict which of these will be matched, nor which result will be returned.<BR><BR> Use regular expressions with care.</BODY></HTML>";
		 else if(name.equals("LOWER")) return "<HTML><BODY><H1>LOWER</H1>Converts a text string to lowercase.<BR><BR><H2>Syntax</H2><B>LOWER(text)</B><BR> returns <B>text</B> with all characters converted to lower case.<BR><BR><H2>Example</H2><B>LOWER(&quot;Good MORNING&quot;)</B><BR> returns <B>good morning</B></BODY></HTML>";
		 else if(name.equals("MATCH")) return "<HTML><BODY><H1>MATCH</H1>Returns the position of a search item in a single row or column table.<BR><BR> <H2>Syntax</H2><B>MATCH(searchitem, searchregion, matchtype)</B><BR> <B>searchitem</B> is the value to be found within the single row or single column range <B>searchregion</B>.<BR><BR> If <B>matchtype</B> is <B>1</B> or omitted, <B>searchregion</B> is assumed to be sorted in ascending order.<BR><BR> <B>MATCH</B> then returns the position of the largest value in <B>searchregion</B> that is less than or equal to <B>searchitem</B>.<BR><BR> If <B>matchtype</B> is <B>-1</B>, <B>searchregion</B> is assumed to be sorted in descending order.<BR><BR> <B>MATCH</B> then returns the position of the smallest value in <B>searchregion</B> that is greater than or equal to <B>searchitem</B>.<BR><BR> If <B>matchtype</B> is <B>0</B>, <B>MATCH</B> returns the position of the first exact match.<H2>Example</H2><B>MATCH(5, B1:B4, 1)</B><BR> where cells <B>B1</B>, <B>B2</B>, <B>B3</B>, <B>B4</B> contain <B>3</B>, <B>4</B>, <B>8</B> and <B>9</B>, returns <B>2</B>.<BR><BR> The second value in <B>B1B4</B> is <B>4</B>, which is the largest value that is less than or equal to <B>5</B>.<BR><BR><B>MATCH(5, B1:B4, -1)</B><BR> where cells <B>B1</B>, <B>B2</B>, <B>B3</B>, <B>B4</B> contain <B>9</B>, <B>8</B>, <B>4</B> and <B>3</B>, returns <B>2</B>.<BR><BR> The second value in <B>B1B4</B> is <B>8</B>, which is the smallest value that is greater than or equal to <B>5</B>.<BR><BR><B>MATCH(5, B1:B4, 0)</B><BR> where cells <B>B1</B>, <B>B2</B>, <B>B3</B>, <B>B4</B> contain <B>4</B>, <B>7</B>, <B>5</B> and <B>2</B>, returns <B>3</B>, as the value <B>5</B> is the third item in <B>B1B4</B>.<BR><BR><B>MATCH(&quot;r.<BR><BR>d&quot;, B1:B4, 0)</B><BR> where cells <B>B1</B>, <B>B2</B>, <B>B3</B>, <B>B4</B> contain <B>blue</B>, <B>red</B>, <B>green</B> and <B>pink</B>, returns <B>2</B> (if regular expressions are enabled).<BR><BR> The regular expression &quot;<B>r.<BR><BR>d</B>&quot; matches <B>red</B>.</BODY></HTML>";
		 else if(name.equals("MAX")) return "<HTML><BODY><H1>MAX</H1>Returns the maximum of a list of arguments, ignoring text entries.<BR><BR><H2>Syntax</H2><B>MAX(number1, number2, ... number30)</B><BR> <B>number1</B> to <B>number30</B> are up to 30 numbers or ranges containing numbers.<BR><BR><H2>Example</H2><B>MAX(2, 6, 4)</B><BR> returns <B>6</B>, the largest value in the list.<BR><BR><B>MAX(B1:B3)</B><BR> where cells <B>B1</B>, <B>B2</B>, <B>B3</B> contain <B>1.1</B>, <B>2.2</B>, and <B>apple</B> returns <B>2.2</B>.</BODY></HTML>";
		 else if(name.equals("MAXA")) return "<HTML><BODY><H1>MAXA</H1>Returns the maximum of a list of arguments, including text and logical entries.<BR><BR><H2>Syntax</H2><B>MAXA(value1, value2, ... value30)</B><BR> <B>value1</B> to <B>value30</B> are up to 30 values or ranges, which may include numbers, text and logical values.<BR><BR> Text is evaluated as <B>0</B>.<BR><BR> Logical values are evaluated as <B>1</B> (<B>TRUE</B>) and <B>0</B> (<B>FALSE</B>).<BR><BR> <H2>Example</H2><B>MAXA(2, 6, 4)</B><BR> returns <B>6</B>, the largest value in the list.<BR><BR><B>MAXA(B1:B3)</B><BR> where cells <B>B1</B>, <B>B2</B>, <B>B3</B> contain <B>-1</B>, <B>-2</B>, and <B>apple</B> returns <B>0</B>, the value of the text.<BR><BR><B>MAXA(0, TRUE)</B><BR> returns <B>1</B>, the value of <B>TRUE</B>.</BODY></HTML>";
		 else if(name.equals("MEDIAN")) return "<HTML><BODY><H1>MEDIAN</H1>Returns the median of a set of numbers.<BR><BR><H2>Syntax</H2><B>MEDIAN(number1, number2, ... number30)</B><BR> <B>number1</B> to <B>number30</B> are up to 30 numbers or ranges containing numbers.<BR><BR> <B>MEDIAN</B> returns the median (middle value) of the numbers.<BR><BR> If the count of numbers is odd, this is the exact middle value.<BR><BR> If the count of numbers is even, the average of the two middle values is returned.<BR><BR><H2>Example</H2><B>MEDIAN(1, 5, 9, 20, 21)</B><BR> returns <B>9</B>, the number exactly in the middle.<BR><BR><B>MEDIAN(1, 5, 9, 20)</B><BR> returns <B>7</B>, which is the average of <B>5</B> and <B>9</B>, the two numbers in the middle.</BODY></HTML>";
		 else if(name.equals("MID")) return "<HTML><BODY><H1>MID</H1>Returns text from the middle of a text string.<BR><BR> <H2>Syntax</H2><B>MID(text, start, number)</B><BR> returns <B>number</B> characters from the text <B>text</B>, starting at position <B>start</B>.<BR><BR><H2>Example</H2><B>MID(&quot;output&quot;, 3, 2)</B><BR> returns <B>tp</B>.</BODY></HTML>";
		 else if(name.equals("MIN")) return "<HTML><BODY><H1>MIN</H1>Returns the minimum of a list of arguments, ignoring text entries.<BR><BR><H2>Syntax</H2><B>MIN(number1, number2, ... number30)</B><BR> <B>number1</B> to <B>number30</B> are up to 30 numbers or ranges containing numbers.<BR><BR><H2>Example</H2><B>MIN(2, 6, 4)</B><BR> returns <B>2</B>, the smallest value in the list.<BR><BR><B>MIN(B1:B3)</B><BR> where cells <B>B1</B>, <B>B2</B>, <B>B3</B> contain <B>1.1</B>, <B>2.2</B>, and <B>apple</B> returns <B>1.1</B>.</BODY></HTML>";
		 else if(name.equals("MINA")) return "<HTML><BODY><H1>MINA</H1>Returns the minimum of a list of arguments, including text and logical entries.<BR><BR><H2>Syntax</H2><B>MINA(value1, value2, ... value30)</B><BR> <B>value1</B> to <B>value30</B> are up to 30 values or ranges, which may include numbers, text and logical values.<BR><BR> Text is evaluated as <B>0</B>.<BR><BR> Logical values are evaluated as <B>1</B> (<B>TRUE</B>) and <B>0</B> (<B>FALSE</B>).<BR><BR> <H2>Example</H2><B>MINA(2, 6, 4)</B><BR> returns <B>2</B>, the smallest value in the list.<BR><BR><B>MINA(B1:B3)</B><BR> where cells <B>B1</B>, <B>B2</B>, <B>B3</B> contain <B>3</B>, <B>4</B>, and <B>apple</B> returns <B>0</B>, the value of the text.<BR><BR><B>MINA(2, TRUE)</B><BR> returns <B>1</B>, the value of <B>TRUE</B>.</BODY></HTML>";
		 else if(name.equals("MINUTE")) return "<HTML><BODY><H1>MINUTE</H1>Returns the minutes of a given time.<BR><BR> <H2>Syntax</H2><B>MINUTE(time)</B><BR> returns the minutes of <B>time</B> as a number, <B>0</B> - <B>59</B>.<BR><BR> <B>time</B> is a date-time serial number.<BR><BR><H2>Example</H2><B>MINUTE(TIME(21,30,15))</B><BR> returns <B>30</B>.<BR><BR><B>MINUTE(A1)</B><BR> where cell A1 contains the time <B>9:25:10</B> as a date-time serial number, returns <B>25</B>.</BODY></HTML>";
		 else if(name.equals("MOD")) return "<HTML><BODY><H1>MOD</H1>Returns the remainder when one integer is divided by another.<BR><BR><H2>Syntax</H2><B>MOD(number, divisor)</B><BR> For integer arguments this function returns <B>number</B> modulo <B>divisor</B>, that is the remainder when <B>number</B> is divided by  <B>divisor</B>.<BR><BR> This function is implemented as <B>number  -  divisor *  INT( number/divisor)</B> , and this formula gives the result if the arguments are not integer.<BR><BR>   <H2>Example</H2><B>MOD(22, 3)</B><BR> returns <B>1</B>, the remainder when <B>22</B> is divided by <B>3</B>.<BR><BR><B>MOD(11.25, 2.5)</B><BR> returns <B>1.25</B>.</BODY></HTML>";
		 else if(name.equals("MODE")) return "<HTML><BODY><H1>MODE</H1>Returns the most common value in a set of numbers.<BR><BR><H2>Syntax</H2><B>MODE(number1, number2, ... number30)</B><BR> <B>number1</B> to <B>number30</B> are up to 30 numbers or ranges/arrays containing numbers.<BR><BR> <B>MODE</B> returns the number that occurs most often, or if more than one number occurs that many times, the smallest such number.<BR><BR> If no number occurs more than once, <B>MODE</B> returns an error.<BR><BR> <i>Advanced topic</i><BR><BR> <B>MODE</B> evaluates its parameters as array formulas - see the examples.<BR><BR><H2>Example</H2><B>MODE(A1:A4)</B><BR> where cells <B>A1:A4</B> contain <B>1</B>, <B>3</B>, <B>2</B>, <B>3</B> returns <B>3</B>, the number occurring most often.<BR><BR><B>MODE(3, 7, 3, 9, 9, 3, 5, 1, 9, 5)</B><BR> returns <B>3</B>.<BR><BR> The number <B>9</B> occurs the same number of times, but <B>3</B> is smaller.<BR><BR><B>( -MODE(-A1A10)=MODE(A1A10) )</B><BR> returns <B>TRUE</B> if there is just one mode for the data in A1A10, and <B>FALSE</B> otherwise.<BR><BR> Notice the two minus signs.<BR><BR><i>Advanced topic</i> <BR><BR>Evaluation as an array formula<B>MODE(ABS({1, 1, 1, 2, 2, -2, -2}))</B><BR> returns <B>2</B>.<BR><BR> The <B>ABS</B> function normally takes a single number, but here it is given an array.<BR><BR> <B>MODE</B> forces the formula to be an array formula, so that the absolute value of each number in the array is found, and given to <B>MODE</B> as the array {1, 1, 1, 2, 2, 2, 2}.<BR><BR> The most common value is now <B>2</B>.</BODY></HTML>";
		 else if(name.equals("MONTH")) return "<HTML><BODY><H1>MONTH</H1>Returns the month of a given date.<BR><BR> <H2>Syntax</H2><B>MONTH(date)</B><BR> returns the month of <B>date</B> as a number, where January is <B>1</B> and December is <B>12</B>.<BR><BR> <B>date</B> may be text or a date-time serial number.<BR><BR><H2>Example</H2><B>MONTH(DATE(2008,06,04)</B><BR> returns <B>6</B>.<BR><BR><B>MONTH(A1)</B><BR> where cell A1 contains the date <B>23. Nov 83</B> as a date-time serial number, returns <B>11</B>.</BODY></HTML>";
		 else if(name.equals("MROUND")) return "<HTML><BODY><H1>MROUND</H1>Returns a number rounded to the nearest multiple of another number.<BR><BR>This function is only available if the Analysis AddIn is installed.<BR><BR> <H2>Syntax</H2><B>MROUND(number, mult)</B><BR> Returns <B>number</B> rounded to the nearest multiple of <B>mult</B>, that is to <B>mult</B> times an integer.<BR><BR> An alternative implementation would be  <B>mult * ROUND(number/mult)</B>.<BR><BR>  <H2>Example</H2><B>MROUND(15.5, 3)</B><BR> returns <B>15</B>, as <B>15.5</B> is closer to <B>15</B> ( = 3*5) than to <B>18</B> ( = 3*6).<BR><BR><B>MROUND(1.4, 0.5)</B><BR> <B>returns 1.5</B> ( = 0.5*3).</BODY></HTML>";
		 else if(name.equals("NA")) return "<HTML><BODY><H1>NA </H1>Returns the #N/A (Not Available) error value.<BR><BR><H2>Syntax</H2><B>NA()</B><BR> This function has no arguments, and returns the error value #N/A.<BR><BR><H2>Example</H2><B>NA()</B><BR> returns #N/A.</BODY></HTML>";
		 else if(name.equals("NETWORKDAYS")) return "<HTML><BODY><H1>NETWORKDAYS</H1>Returns the number of workdays between two dates.<BR><BR> <H2>Syntax</H2><B>NETWORKDAYS(startdate, enddate, hols_range)</B><BR> returns the number of workdays between <B>startdate</B> and <B>enddate</B> (inclusive).<BR><BR> Saturday and Sunday are assumed to be non-working days.<BR><BR> <B>hols_range</B> (optional) is a range containing dates of other non-working days.<BR><BR> <H2>Example</H2><B>NETWORKDAYS(DATE(2008,09,05), DATE(2008,09,08))</B><BR> returns <B>2</B>.<BR><BR> 5. Sep 08 is a Friday and 8. Sep 08 is a Monday.<BR><BR> The Friday and Monday are counted as working days; Saturday and Sunday are ignored.<BR><BR><B>NETWORKDAYS(DATE(2008,09,05), DATE(2008,09,08), D1:D2)</B><BR> where D1 contains 8. Sep 08 and D2 contains 25. Dec 08, returns <B>1</B>.<BR><BR> 5. Sep 08 is a Friday which is a working day; Saturday and Sunday are ignored; 8. Sep 08 is a Monday but is specified as a holiday (in cell D1).</BODY></HTML>";
		 else if(name.equals("NOT")) return "<HTML><BODY><H1>NOT </H1>Reverses the logical value.<BR><BR> Returns TRUE if the argument is FALSE, and FALSE if the argument is TRUE.<BR><BR><H2>Syntax</H2><B>NOT(logical_value)</B><BR> where <B>logical_value</B> is the logical value to be reversed.<BR><BR><H2>Example</H2><B>NOT( TRUE() )</B><BR> returns <B>FALSE</B></BODY></HTML>";
		 else if(name.equals("NOW")) return "<HTML><BODY><H1>NOW</H1>Returns the current date and time<H2>Syntax</H2><B>NOW()</B><BR> returns the current date and time (as a date-time serial number).<BR><BR> <B>NOW</B> is updated at every recalculation, for instance if a cell is modified.<BR><BR><H2>Example</H2><B>NOW()</B><BR> when calculated at say 12 noon on 1. Apr 08 returns that date and time.</BODY></HTML>";
		 else if(name.equals("NPER")) return "<HTML><BODY><H1>NPER</H1>Returns the number of payment periods for an annuity.<BR><BR><H2>Syntax</H2><B>NPER(rate, payment, presentvalue, futurevalue, type)</B><BR> <B>rate</B><BR> the (fixed) interest rate per period.<BR><BR> <B>payment</B><BR> the payment made each period.<BR><BR> <B>presentvalue</B><BR> the lump sum payment at the start of the term.<BR><BR> <B>futurevalue</B><BR> the cash balance paid at the end of the term (optional - defaults to 0).<BR><BR> <B>type</B><BR> when payments are made (optional - defaults to 0) 0 - at the end of each period.<BR><BR> 1 - at the start of each period (including a payment at the start of the term).<BR><BR> <B>NPER</B> returns the number of payment periods implied by a lump sum (<B>presentvalue</B>) at the start of the term, a <B>payment</B> being made each period for <B>numperiods</B> periods, at fixed rate interest, compounded each period, and a lump sum (<B>futurevalue</B>) at the end of the term.<BR><BR><H2>Example</H2><B>NPER(5%, -100, 0, 1000, 0)</B><BR> returns approximately <B>8.31</B>, the number of periods to realise this scenario.</BODY></HTML>";
		 else if(name.equals("NPV")) return "<HTML><BODY><H1>NPV</H1>Returns the net present value of an investment with regular cash payments.<BR><BR><H2>Syntax</H2><B>NPV(discountrate, payment1, payment2, ... payment30)</B><BR> <B>payment1</B> to <B>payment30</B> are up to 30 numbers or ranges containing numbers, representing payments made at the end of each of a series of fixed length periods.<BR><BR> The payments may be both positive and negative, for income and outgoing.<BR><BR> <B>discountrate</B> is the discount rate (expressed as a fraction of 1) which you consider applies to one single period.<BR><BR> It is assumed to be constant for all periods.<H2>Example</H2><B>NPV(8.75%, 1000, 2000, 3000)</B><BR> where the discount rate <B>8.75%</B> is the assumed competitive return over one year, and <B>1000</B> is to be paid at the end of year 1, <B>2000</B> at the end of year 2 and <B>3000</B> at the end of year 3, returns <B>4943.21</B> as currency.<BR><BR> <B>NPV(0.0875, A1:A3)</B><BR> where cells A1:A3 contain <B>1000</B>, <B>2000</B> and <B>3000</B>, returns <B>4943.21</B> similarly.</BODY></HTML>";
		 else if(name.equals("ODD")) return "<HTML><BODY><H1>ODD</H1>Rounds a number up, away from zero, to the next odd integer.<BR><BR><H2>Syntax</H2><B>ODD(number)</B><BR> returns <B>number</B> rounded to the next odd integer up, away from zero.<BR><BR> <H2>Example</H2><B>ODD(1.2)</B><BR> returns <B>3</B>.<BR><BR><B>ODD(1)</B><BR> returns <B>1</B>.<BR><BR><B>ODD(0)</B><BR> returns <B>0</B>.<BR><BR><B>ODD(-3.1)</B><BR> returns <B>-5</B>.</BODY></HTML>";
		 else if(name.equals("OFFSET")) return "<HTML><BODY><H1>OFFSET </H1>Returns a modified reference, given a reference, an offset, and a desired size.<BR><BR> <H2>Syntax</H2><B>OFFSET(reference, row_offset, col_offset, new_height, new_width)</B><BR> <B>reference</B> is the given reference, which may be a range.<BR><BR> <B>row_offset</B> and <B>col_offset</B> are the number of rows / columns to move <B>reference</B> down / right by.<BR><BR> Negative numbers are allowed.<BR><BR> <B>new_height</B> and <B>new_width</B> set the height and width of the new reference, by adjusting the bottom right corner.<BR><BR> These are optional parameters.<BR><BR><H2>Example</H2><B>=OFFSET(A1, 1, 2)</B><BR> in a cell, returns the contents of cell C2.<BR><BR> The <B>new_height</B> and <B>new_width</B> parameters have been omitted.<BR><BR><B>=OFFSET(B3, -2, 0, 1, 1)</B><BR> in a cell, returns the contents of cell B1.<BR><BR> A negative offset is allowed.<BR><BR><B>=SUM(OFFSET(A1, 2, 2, 2, 3))</B><BR> in a cell, returns the sum of the contents of cells C3E4.<BR><BR> 2 rows and 2 columns are added to A1 to offset it to C3, and then the new size extends the range to E4.<BR><BR><B>=SUM(OFFSET(C1:G1, 0, 0, 1, 3))</B><BR> in a cell, returns the sum of the contents of cells C1:E1.</BODY></HTML>";
		 else if(name.equals("OR")) return "<HTML><BODY><H1>OR </H1>Returns TRUE if any of the arguments are considered TRUE, and FALSE otherwise.<BR><BR><H2>Syntax</H2><B>OR(argument1, argument2 ...argument30)</B><B>argument1</B> to <B>argument30</B> are up to 30 arguments, each of which may be a logical result or value, or a reference to a cell or range.<BR><BR><B>OR</B> tests every value (as an argument, or in a each referenced cell), and returns <B>TRUE</B> if any of them are <B>TRUE</B>.<BR><BR> Any non-zero number is considered to be <B>TRUE</B>.<BR><BR> Any text cells in ranges are ignored.<BR><BR> <H2>Example</H2><B>OR(TRUE, FALSE)</B><BR> returns <B>TRUE</B>.<BR><BR><B>OR(0, 5)</B><BR> returns <B>TRUE</B>, because 5 is considered <B>TRUE</B>.<BR><BR>If cells A5:B8 all contain <B>FALSE</B>, and cell C2 contains <B>=TRUE()</B><BR><B>OR(1&gt;2, A5:B8, C2)</B><BR> returns <B>TRUE</B>, because cell C2 is <B>TRUE</B>.</BODY></HTML>";
		 else if(name.equals("PI")) return "<HTML><BODY><H1>PI</H1>Returns 3.14159265358979, the value of the mathematical constant PI to 14 decimal places.<BR><BR><H2>Syntax</H2><B>PI()</B><H2>Example</H2><B>PI()</B><BR> returns <B>3.14159265358979</B></BODY></HTML>";
		 else if(name.equals("PMT")) return "<HTML><BODY><H1>PMT</H1>Returns the payment per period for a fixed rate loan.<BR><BR><H2>Syntax</H2><B>PMT(rate, numperiods, principal, finalbalance, type)</B><BR> <B>rate</B><BR> the interest rate per period.<BR><BR> <B>numperiods</B><BR> the total number of payment periods in the term.<BR><BR> <B>principal</B><BR> the initial sum borrowed.<BR><BR> <B>finalbalance</B><BR> the cash balance you wish to attain at the end of the term (optional - defaults to 0).<BR><BR> With a loan, this would normally be 0.<BR><BR> <B>type</B><BR> when payments are made (optional - defaults to 0) 0 - at the end of each period.<BR><BR> 1 - at the start of each period (including a payment at the start of the term).<BR><BR> See the examples for how this function can be used for building up savings with fixed regular payments.<BR><BR><H2>Example</H2><B>PMT(5.5%/12, 12*2, 5000, 0, 0)</B><BR>  returns <B>-220.48</B> in currency units.<BR><BR> You take out a 2 year loan of 5000 currency units at a yearly interest rate of 5.5%, making monthly payments at the end of the month.<BR><BR> You pay 220.48 currency units each month; it is given as negative because you pay it.<BR><BR><B>PMT(5%/12, 12*2, 0, 1000, 1)</B><BR>  returns <B>-39.54</B> in currency units.<BR><BR> You wish to save 1000 currency units over 2 years, making monthly payments, beginning today.<BR><BR> You assume the rate will remain the same at 5%.<BR><BR> Interest is compounded monthly.<BR><BR> If you save 39.54 currency units each month, the value at the end of 2 years will be 1000 currency units.<BR><BR><B>PMT(5.5%/12, 12*2, 5000, 1000, 0)</B><BR>  returns <B>-259.99</B> in currency units.<BR><BR> You take out a 2 year loan of 5000 currency units at a yearly interest rate of 5.5%, making monthly payments at the end of the month.<BR><BR> You wish to build up a lump sum of 1000 currency units, to be paid to you at the end of the term.<BR><BR> Interest is compounded monthly.<BR><BR> This is a hypothetical example, which makes the unlikely assumption that the interest you are charged when in debt is the same as the interest that you get when in credit (when building up your 1000 lump sum).<BR><BR> It illustrates the necessary sign of each parameter 5000 is positive, because you are paid the loan sum; 1000 is positive, because you are paid the lump sum; 259.99 is negative, because you pay the monthly sum.</BODY></HTML>";
		 else if(name.equals("POISSON")) return "<HTML><BODY><H1>POISSON</H1>Calculates values for a Poisson distribution.<BR><BR> <H2>Syntax</H2><B>POISSON(x, &amp;lambda;, mode)</B><BR> The Poisson distribution is a discrete probability distribution giving the probability that <B>x</B> events occur in a certain time, where events occur independently, and where on average <B>&amp;lambda;</B> events are expected.<BR><BR> <B>x</B> should be &gt;=0 and <B>&amp;lambda;</B> should be &gt;0.<BR><BR> <B>x</B> should be integer.<BR><BR> If mode is <B>0</B>, <B>POISSON</B> calculates the probability density function of the Poisson distribution.<BR><BR>If mode is <B>1</B>, <B>POISSON</B> calculates the cumulative distribution function of the Poisson distribution.<H2>Example</H2><B>POISSON(8, 9, 0)</B><BR> returns approximately 0.1317, the probability that exactly 8 events occur in a time period where you expect 9 events.<BR><BR><B>POISSON(8, 9, 1)</B><BR> returns approximately 0.4556, the probability that up to and including 8 events occur in a time period where you expect 9 events.</BODY></HTML>";
		 else if(name.equals("POWER")) return "<HTML><BODY><H1>POWER</H1>Returns a number raised to a power.<BR><BR><H2>Syntax</H2><B>POWER(number, power)</B><BR> returns <B>number<sup>power</sup></B>, that is <B>number</B> raised to the power of <B>power</B>.<BR><BR> The same result may be achieved by using the exponentiation operator <B>^</B><BR> <B>number^power</B><H2>Example</H2><B>POWER(4, 3)</B><BR> returns <B>64</B>, which is <B>4</B> to the power of <B>3</B>.<BR><BR><B>4^3</B><BR> also returns <B>4</B> to the power of <B>3</B>.</BODY></HTML>";
		 else if(name.equals("PRODUCT")) return "<HTML><BODY><H1>PRODUCT</H1>Multiplies all the numbers given as arguments and returns the product.<BR><BR><H2>Syntax</H2><B>PRODUCT(number1, number2, ... number30)</B><BR> <B>number1</B> to <B>number30</B> are up to 30 numbers or ranges/arrays of numbers whose product is to be calculated.<BR><BR> <B>PRODUCT</B> returns <B>number1 * number2 * number3 * .......<BR><BR>.<BR><BR> </B><BR> <B>PRODUCT</B> ignores any text or empty cell within a range or array.<BR><BR><H2>Example</H2><B>PRODUCT(2, 3, 4)</B><BR> returns <B>24</B> (<B>2 * 3 * 4</B>).<BR><BR><B>PRODUCT(A1A2)</B><BR> where <B>A1</B> and <B>A2</B> contain <B>3</B> and <B>5</B>,  returns <B>15</B> (<B>3 * 5</B>).</BODY></HTML>";
		 else if(name.equals("RADIANS")) return "<HTML><BODY><H1>RADIANS</H1>Converts degrees to radians.<BR><BR><H2>Syntax</H2><B>RADIANS(degrees)</B><BR> <B>degrees</B> is the angle in degrees to be converted to radians.<BR><BR> <H2>Example</H2><B>RADIANS(90)</B><BR> returns <B>1.5707963267949</B>, which is <B>PI/2</B> to Calc's accuracy.</BODY></HTML>";
		 else if(name.equals("RAND")) return "<HTML><BODY><H1>RAND</H1>Returns a random number between 0 and 1.<BR><BR><H2>Syntax</H2><B>RAND()</B><BR> This function produces a new random number each time Calc recalculates, greater than or equal to 0, and less than 1.<BR><BR> To force Calc to recalculate manually press Shift+Ctrl+F9.<BR><BR> To generate a random number which never recalculates, copy a cell containing <B>=RAND()</B>, and use Edit - Paste Special... (with Paste All and Formulas <u>not</u> selected and Numbers selected).<BR><BR><H2>Example</H2><B>RAND()</B><BR> returns a random number between <B>0</B> (inclusive) and <B>1</B> (exclusive).<BR><BR><B>RAND()*(b-a) + a</B><BR> returns a random real number between <B>a</B> and <B>b</B>.</BODY></HTML>";
		 else if(name.equals("RANDBETWEEN")) return "<HTML><BODY><H1>RANDBETWEEN</H1>Returns an integer random number in a specified range.<BR><BR>This function is only available if the Analysis AddIn is installed.<BR><BR> <H2>Syntax</H2><B>RANDBETWEEN(bottom, top)</B><BR> Returns an integer random number between integers <B>bottom</B> and <B>top</B> (both inclusive).<BR><BR> This function produces a new random number each time Calc recalculates.<BR><BR> To force Calc to recalculate manually press Shift+Ctrl+F9.<BR><BR> To generate a random number which never recalculates, copy a cell containing this function, and use Edit - Paste Special... (with Paste All and Formulas <u>not</u> selected and Numbers selected).<BR><BR> An alternative to this function not requiring the Analysis AddIn would be <B>INT(RAND()*(top-bottom+1))+bottom</B>.<BR><BR><H2>Example</H2><B>RANDBETWEEN(20, 30)</B><BR> returns an integer between <B>20</B> and <B>30</B> (inclusive).</BODY></HTML>";
		 else if(name.equals("RANK")) return "<HTML><BODY><H1>RANK</H1>Returns the rank of a number in a list of numbers.<BR><BR><H2>Syntax</H2><B>RANK(number, numberlist, order)</B><BR> returns the rank of <B>number</B> within the unordered range or array of numbers <B>numberlist</B>.<BR><BR> If <B>order</B> is zero or omitted, numbers are ranked with the highest being first; if <B>order</B> is non-zero, numbers are ranked with the lowest being first.<BR><BR> An error results if <B>number</B> is not present in <B>numberlist</B>.<BR><BR><H2>Example</H2><B>RANK(5, B1B4)</B><BR> where cells <B>B1</B>, <B>B2</B>, <B>B3</B>, <B>B4</B> contain <B>4</B>, <B>7</B>, <B>5</B>,and <B>8</B>, returns <B>3</B>.<BR><BR> The highest number is <B>8</B>, then <B>7</B>, then in third place <B>5</B>.<BR><BR><B>RANK(5, {3,5|2.6,1}, 1)</B><BR> returns <B>4</B>, as the other three numbers are lower than <B>5</B>.</BODY></HTML>";
		 else if(name.equals("RATE")) return "<HTML><BODY><H1>RATE</H1>Calculates the interest rate for an annuity.<BR><BR><H2>Syntax</H2><B>RATE(numperiods, payment, presentvalue, futurevalue, type, guess)</B><BR> <B>rate</B><BR> the (fixed) interest rate per period.<BR><BR> <B>numperiods</B><BR> the total number of payment periods in the term.<BR><BR> <B>payment</B><BR> the payment made each period.<BR><BR> If <B>futurevalue</B> is given, this may omitted (defaults to 0).<BR><BR> <B>presentvalue</B><BR> the lump sum payment at the start of the term.<BR><BR> <B>futurevalue</B><BR> the cash balance you wish to attain at the end of the term (optional - defaults to 0).<BR><BR> <B>type</B><BR> when payments are made (optional - defaults to 0) 0 - at the end of each period.<BR><BR> 1 - at the start of each period (including a payment at the start of the term).<BR><BR> <B>guess</B><BR> an optional guess of the interest rate (defaults to 10%).<BR><BR> <B>RATE</B> calculates the fixed interest rate needed, so that <B>presentvalue</B> (the value today) followed by a <B>payment</B>  each period for <B>numperiods</B> periods results in <B>futurevalue</B>, the value at the end of the term.<BR><BR> Interest is assumed to be compounded each period.<BR><BR> The calculation uses iteration to solve an equation, with <B>guess</B> as the starting value for the iteration.<BR><BR> If this function returns error <B>Err523</B>, the iteration has failed to converge - try a different guess, or recheck the parameters.<BR><BR><H2>Example</H2><B>RATE(3, -1000, 0, 3152, 0, 10%)</B><BR>  returns approximately <B>4.98%</B>.<BR><BR> You pay 1,000 at the end of each year for 3 years, and receive 3,152.50 at the end of the term.<BR><BR> The applicable interest rate was 4.98%.</BODY></HTML>";
		 else if(name.equals("REPLACE")) return "<HTML><BODY><H1>REPLACE</H1>Replaces part of a text string with a different text string.<BR><BR><H2>Syntax</H2><B>REPLACE(originaltext, startposition, length, newtext)</B><BR> in <B>originaltext</B>, removes <B>length</B> characters beginning at character <B>startposition</B>, replaces them with <B>newtext</B>, and returns the result.<BR><BR> <B>startposition</B> and <B>length</B> must be <B>1</B> or more.<BR><BR><H2>Example</H2><B>REPLACE(&quot;mouse&quot;, 2, 3, &quot;ic&quot;)</B><BR> returns <B>mice</B>.<BR><BR> Beginning at character position 2, 3 characters (<B>ous</B>) are removed and replaced by <B>ic</B>.</BODY></HTML>";
		 else if(name.equals("RIGHT")) return "<HTML><BODY><H1>RIGHT</H1>Returns text from the right side of a text string.<BR><BR><H2>Syntax</H2><B>RIGHT(text, number)</B><BR> returns <B>number</B> characters from the right side of the text <B>text</B>.<BR><BR> <B>number</B> defaults to <B>1</B> if omitted.<BR><BR><H2>Example</H2><B>RIGHT(&quot;output&quot;, 3)</B><BR> returns <B>put</B>.</BODY></HTML>";
		 else if(name.equals("ROUND")) return "<HTML><BODY><H1>ROUND</H1>Rounds a number to a certain precision.<BR><BR><H2>Syntax</H2><B>ROUND(number, places)</B><BR> returns  <B>number</B> rounded to <B>places</B> decimal places.<BR><BR> If <B>places</B> is omitted or zero, the function rounds to the nearest integer.<BR><BR> If <B>places</B> is negative, the function rounds to the nearest <B>10</B>, <B>100</B>, <B>1000</B>, etc.<BR><BR> This function rounds to the nearest number.<BR><BR><H2>Example</H2><B>ROUND(2.348, 2)</B><BR> returns <B>2.35</B><B>ROUND(2.348, 0)</B><BR> returns <B>2</B><B>ROUND(2.5)</B><BR> returns <B>3</B><B>ROUND(987.65, -2)</B><BR> returns <B>1000</B></BODY></HTML>";
		 else if(name.equals("ROUNDDOWN")) return "<HTML><BODY><H1>ROUNDDOWN</H1>Rounds a number down, toward zero, to a certain precision.<BR><BR><H2>Syntax</H2><B>ROUNDDOWN(number, places)</B><BR> returns  <B>number</B> rounded down (towards zero) to <B>places</B> decimal places.<BR><BR> If <B>places</B> is omitted or zero, the function rounds down to an integer.<BR><BR> If <B>places</B> is negative, the function rounds down to the next <B>10</B>, <B>100</B>, <B>1000</B>, etc.<BR><BR> This function rounds ''towards zero''.<BR><BR><H2>Example</H2><B>ROUNDDOWN(1.234, 2)</B><BR> returns <B>1.23</B><B>ROUNDDOWN(45.67, 0)</B><BR> returns <B>45</B><B>ROUNDDOWN(-45.67)</B><BR> returns <B>-45</B><B>ROUNDDOWN(987.65, -2)</B><BR> returns <B>900</B></BODY></HTML>";
		 else if(name.equals("ROUNDUP")) return "<HTML><BODY><H1>ROUNDUP</H1>Rounds a number up, away from zero, to a certain precision.<BR><BR><H2>Syntax</H2><B>ROUNDUP(number, places)</B><BR> returns  <B>number</B> rounded up (away from zero) to <B>places</B> decimal places.<BR><BR> If <B>places</B> is omitted or zero, the function rounds up to an integer.<BR><BR> If <B>places</B> is negative, the function rounds up to the next <B>10</B>, <B>100</B>, <B>1000</B>, etc.<BR><BR> This function rounds ''away from zero''.<BR><BR><H2>Example</H2><B>ROUNDUP(1.1111, 2)</B><BR> returns <B>1.12</B><B>ROUNDUP(1.2345, 1)</B><BR> returns <B>1.3</B><B>ROUNDUP(45.67, 0)</B><BR> returns <B>46</B><B>ROUNDUP(-45.67)</B><BR> returns <B>-46</B><B>ROUNDUP(987.65, -2)</B><BR> returns <B>1000</B></BODY></HTML>";
		 else if(name.equals("ROW")) return "<HTML><BODY><H1>ROW </H1>Returns the row number(s), given a reference.<BR><BR> <H2>Syntax</H2><B>ROW(reference)</B><BR> returns the row number of <B>reference</B>, where <B>reference</B> is a reference to a cell.<BR><BR> If <B>reference</B> is omitted, the row number of the current cell (containing the formula) is returned.<BR><BR> If <B>reference</B> is a range of cells <u>and</u> the formula is entered as an array formula (by pressing Ctrl-Shift Enter rather than Enter) a single column array of row numbers is returned.<BR><BR><H2>Example</H2><B>ROW(B3)</B><BR> returns <B>3</B>.<BR><BR> Cell B3 is on the third row.<BR><BR><B>ROW()</B><BR> if entered in cell D2, returns <B>2</B>.<BR><BR> Cell D2 is on the second row.<BR><BR><B>ROW(D5D8)</B> (entered with the Enter key) returns <B>5</B>.<BR><BR> This is <u>not</u> an array formula, so the row number of the first cell D5 is returned.<BR><BR><B>ROW(D5D8)</B> (entered with Ctrl-Shift-Enter) returns the single column array <B>{5, 6, 7, 8}</B>, as this <u>is</u> an array formula.<BR><BR> If this formula is entered in cell A1, A1 will display <B>5</B>, A2 <B>6</B>, A3 <B>7</B> and A4 <B>8</B>.</BODY></HTML>";
		 else if(name.equals("ROWS")) return "<HTML><BODY><H1>ROWS </H1>Returns the number of rows in a given reference.<BR><BR><H2>Syntax</H2><B>ROWS(reference)</B><BR> <B>reference</B> may be given either explicitly (eg <B>A3B5</B>) or by name (eg <B>myref</B>).<BR><BR> It is possible to define a name to represent more than one range (eg by entering <B>$A$1:$A$3,$C$1:$C$4</B> in the Assigned To box of the Insert - Names - Define... dialog).<BR><BR> In this case <B>ROWS</B> sums the number of rows in each range, irrespective of any duplication of rows.<BR><BR> <H2>Example</H2><B>ROWS(A3B5)</B><BR> returns <B>3</B>; there are three rows in this range, namely rows 3,4 and 5.<BR><BR><B>ROWS(G4G6)</B><BR> returns <B>3</B>; there are three rows in this range, namely rows 4,5 and 6.<BR><BR><B>ROWS(D8)</B><BR> returns <B>1</B>; <B>D8</B> is interpreted as a one cell range, with a single row (row 8).<BR><BR><B>ROWS(myref)</B><BR> where <B>myref</B> has been defined as the multiple range <B>$A$1:$A$3,$C$1:$C$4</B>, returns <B>7</B>; </BODY></HTML>";
		 else if(name.equals("SEARCH")) return "<HTML><BODY><H1>SEARCH</H1>Returns the position of a string of text within another string.<BR><BR> <H2>Syntax</H2><B>SEARCH(findtext, texttosearch, startposition)</B><BR> returns the character position of the first occurrence of <B>findtext</B> within <B>texttosearch</B>.<BR><BR> <B>startposition</B> (optional) is the position from which the search starts.<BR><BR> The search is not case-sensitive.<BR><BR><H2>Example</H2><B>SEARCH(&quot;yo&quot;, &quot;Yoyo&quot;)</B><BR> returns <B>1</B>.<BR><BR> The search is case-insensitive.<BR><BR><B>SEARCH(&quot;cho&quot;, &quot;choochoo&quot;, 2)</B><BR> returns <B>5</B>.<BR><BR><B>SEARCH(&quot;t.<BR><BR>n&quot;, &quot;often&quot;)</B><BR> returns <B>3</B>, if regular expressions are enabled.<BR><BR> The &quot;.<BR><BR>&quot; stands for any single character in a regular expression, so <B>&quot;t.<BR><BR>n&quot;</B> matches <B>&quot;ten&quot;</B>.<BR><BR><B>SEARCH(&quot;xyz&quot;,&quot;abcdef&quot;,1)</B><BR> returns <B>#VALUE!</B>.<BR><BR> NOTE  This is an error condition, which must be 'handled' if used as the argument to another function.<BR><BR> <B>IF( SEARCH(&quot;xyz&quot;,&quot;abcdef&quot;,1) , &quot;Substring Present&quot;, &quot;ERR Missing Substring&quot; )</B><BR> returns <B>#VALUE!</B> which is not very useful, therefore we could use either <B>ISERROR()</B> or <B>ISNUMBER()</B> for example <B>IF( ISERROR( SEARCH(&quot;xyz&quot;,&quot;abcdef&quot;,1) ) , &quot;ERR Missing Substring&quot;, &quot;Substring Present&quot; )</B>.<BR><BR> returns <B>&quot;ERR Missing Substring&quot;</B> (... allowing the IF() to function, and not propagating the error from the SEARCH() function.<BR><BR> <B>IF( ISNUMBER( SEARCH(&quot;xyz&quot;,&quot;abcdef&quot;,1) ) , &quot;Substring Present&quot;, &quot;ERR Missing Substring&quot; )</B>.<BR><BR> returns <B>&quot;ERR Missing Substring&quot;</B> (... allowing the IF() to function, and not propagating the error from the SEARCH() function.<BR><BR> NOTE  In practice, it may be more maintainable to use ISNUMBER() to avoid negative logic, and it is more indicitive of the evaluation desired  if the substring has a position, then ISNUMBER() is TRUE, else ISNUMBER() is FALSE.</BODY></HTML>";
		 else if(name.equals("SECOND")) return "<HTML><BODY><H1>SECOND</H1>Returns the seconds of a given time.<BR><BR> <H2>Syntax</H2><B>SECOND(time)</B><BR> returns the seconds of <B>time</B> as a number, <B>0</B> - <B>59</B>.<BR><BR> <B>time</B> may be text or a date-time serial number.<BR><BR><H2>Example</H2><B>SECOND(TIME(21,30,15)</B><BR> returns <B>15</B>.<BR><BR><B>SECOND(A1)</B><BR> where cell A1 contains the time <B>9:25:10</B> as a date-time serial number, returns <B>10</B>.</BODY></HTML>";
		 else if(name.equals("SIGN")) return "<HTML><BODY><H1>SIGN</H1>Returns the sign of a number-  1 if the number is positive, -1 if negative and 0 if zero.<BR><BR><H2>Syntax</H2><B>SIGN(number)</B><BR> <B>number</B> is the number whose sign is to be determined.<BR><BR><H2>Example</H2><B>SIGN(3.4)</B><BR> returns <B>1</B>.<BR><BR><B>SIGN(-4.5)</B><BR> returns <B>-1</B>.<BR><BR><B>SIGN(0)</B><BR> returns <B>0</B>.</BODY></HTML>";
		 else if(name.equals("SIN")) return "<HTML><BODY><H1>SIN</H1>Returns the sine of the given angle (in radians).<BR><BR><H2>Syntax</H2><B>SIN(angle)</B><BR> returns the (trigonometric) sine of <B>angle</B>, the angle in radians.<BR><BR> To return the sine of an angle in degrees, use the <B>RADIANS</B> function.<BR><BR><H2>Example</H2><B>SIN(PI()/2)</B><BR> returns <B>1</B>, the sine of <B>PI/2</B> radians<B>SIN(RADIANS(30))</B><BR> returns <B>0.5</B>, the sine of <B>30</B> degrees</BODY></HTML>";
		 else if(name.equals("SINH")) return "<HTML><BODY><H1>SINH</H1>Returns the hyperbolic sine of a number.<BR><BR><H2>Syntax</H2><B>SINH(number)</B><BR> returns the hyperbolic sine of <B>number</B>.<BR><BR><H2>Example</H2><B>SINH(0)</B><BR> returns <B>0</B>, the hyperbolic sine of <B>0</B>.</BODY></HTML>";
		 else if(name.equals("SMALL")) return "<HTML><BODY><H1>SMALL</H1>Returns the n<sup>th</sup> smallest value in a list of numbers.<BR><BR><H2>Syntax</H2><B>SMALL(numberlist, n)</B><BR> returns the <B>n</B><sup>th</sup> smallest number within the (unordered) range or array of numbers <B>numberlist</B>.<BR><BR><H2>Example</H2><B>SMALL(B1:B4, 3)</B><BR> where cells <B>B1</B>, <B>B2</B>, <B>B3</B>, <B>B4</B> contain <B>4</B>, <B>7</B>, <B>5</B>,and <B>8</B>, returns <B>7</B>.<BR><BR> The lowest number is <B>4</B>, then <B>5</B>, then the third lowest is <B>7</B>.</BODY></HTML>";
		 else if(name.equals("SQRT")) return "<HTML><BODY><H1>SQRT</H1>Returns the positive square root of a number.<BR><BR> <H2>Syntax</H2><B>SQRT(number)</B><BR> Returns the positive square root of <B>number</B>.<BR><BR> <B>number</B> must be positive.<BR><BR><H2>Example</H2><B>SQRT(16)</B><BR> returns <B>4</B>.<BR><BR><B>SQRT(-16)</B><BR> returns an ''invalid argument'' error.</BODY></HTML>";
		 else if(name.equals("STDEV")) return "<HTML><BODY><H1>STDEV</H1>Returns the sample standard deviation of the arguments.<BR><BR><H2>Syntax</H2><B>STDEV(number1, number2, ... number30)</B><BR> <B>number1</B> to <B>number30</B> are up to 30 numbers or ranges containing numbers.<BR><BR> <B>STDEV</B> returns the standard deviation where <B>number1</B> to <B>number30</B> are a sample of the entire population.><H2>Example</H2><B>STDEV(2, 6, 4)</B><BR> returns <B>2</B>.</BODY></HTML>";
		 else if(name.equals("SUBSTITUTE")) return "<HTML><BODY><H1>SUBSTITUTE</H1>Substitutes new text for old text in a text string.<BR><BR><H2>Syntax</H2><B>SUBSTITUTE(originaltext, oldtext, newtext, which)</B><BR> In <B>originaltext</B>, removes <B>oldtext</B>, inserts <B>newtext</B> in its place, and returns the result.<BR><BR> <B>oldtext</B> and <B>newtext</B> can have different lengths.<BR><BR> <B>which</B> (optional) is a number which specifies which occurrence of <B>oldtext</B> to replace (counting from the left).<BR><BR> If omitted, <u>all</u> occurrences are replaced.<BR><BR><H2>Example</H2><B>SUBSTITUTE(&quot;castle&quot;, &quot;stl&quot;, &quot;v&quot;)</B><BR> returns <B>cave</B>.<BR><BR><B>SUBSTITUTE(&quot;a red red rose&quot;, &quot;red&quot;, &quot;white&quot;)</B><BR> returns <B>a white white rose</B>.<BR><BR> All occurrences of <B>red</B> are replaced if <B>which</B> is omitted.<BR><BR><B>SUBSTITUTE(&quot;a red red rose&quot;, &quot;red&quot;, &quot;and white&quot;, 2)</B><BR> returns <B>a red and white rose</B>.<BR><BR> The second occurrence of <B>red</B> is replaced.</BODY></HTML>";
		 else if(name.equals("SUBTOTAL")) return "<HTML><BODY><H1>SUBTOTAL</H1>Returns SUM, AVERAGE, STDEV, etc.<BR><BR> results for filtered data.<BR><BR><H2>Syntax</H2><B>SUBTOTAL(function, range)</B><BR> <B>range</B> is the overall range from which cells for calculation are selected by filtering.<BR><BR> <B>function</B> is a number that specifies the function to calculate, as follows{| border=&quot;1&quot; cellpadding=&quot;5&quot; cellspacing=&quot;0&quot; style=&quot;margin 1em auto 1em auto&quot;!<B>function</B>||Function|-|align=&quot;center&quot;|1||AVERAGE|-|align=&quot;center&quot;|2||COUNT|-|align=&quot;center&quot;|3||COUNTA|-|align=&quot;center&quot;|4||MAX|-|align=&quot;center&quot;|5||MIN|-|align=&quot;center&quot;|6||PRODUCT|-|align=&quot;center&quot;|7||STDEV|-|align=&quot;center&quot;|8||STDEVP|-|align=&quot;center&quot;|9||SUM|-|align=&quot;center&quot;|10||VAR|-|align=&quot;center&quot;|11||VARP|} If <B>range</B> contains other <B>SUBTOTAL</B> functions they are ignored to avoid double counting.<BR><BR><H2>Example</H2>You have a table in the cell range A1:B5 containing cities in column A and accompanying figures in column B.<BR><BR> You have used an AutoFilter so that you only see rows containing the city <B>Hamburg</B>.<BR><BR> You want to see the sum of the figures that are displayed; that is, just the subtotal for the filtered rows.<BR><BR><B>SUBTOTAL(9, B1:B5)</B><BR> returns the desired result.<BR><BR>&lt;br clear=&quot;all&quot; /&gt;</BODY></HTML>";
		 else if(name.equals("SUM")) return "<HTML><BODY><H1>SUM </H1>Sums the contents of cells.<BR><BR><H2>Syntax</H2><B>SUM(number1, number2, ... number30)</B><BR> <B>number1</B> to <B>number30</B> are up to 30 numbers or ranges/arrays of numbers whose sum is to be calculated.<BR><BR> <B>SUM</B> ignores any text or empty cell within a range or array.<BR><BR> <B>SUM</B> can also be used to sum or count cells where a specified condition is true - see Conditional Counting and Summation.<BR><BR><H2>Example</H2><B>SUM(2, 3, 4)</B><BR> returns <B>9</B>, because <B>2</B>+<B>3</B>+<B>4</B> = <B>9</B>.<BR><BR><B>SUM(B1:B3)</B><BR> (where cells <B>B1</B>, <B>B2</B>, <B>B3</B> contain <B>1.1</B>, <B>2.2</B>, <B>3.3</B>) returns <B>6.6</B>.</BODY></HTML>";
		 else if(name.equals("SUMIF")) return "<HTML><BODY><H1>SUMIF </H1>Conditionally sums the contents of cells in a range.<BR><BR><H2>Syntax</H2><B>SUMIF(test_range, condition, sum_range)</B><BR> This function identifies those cells in the range <B>test_range</B> that meet the <B>condition</B>, and sums the corresponding cells in the range <B>sum_range</B>.<BR><BR> If <B>sum_range</B> is omitted the cells in <B>test_range</B> are summed.<BR><BR>  <B>condition</B> may be a number, such as <B>34.5</B><BR> an expression, such as <B>2/3</B> or <B>SQRT(B5)</B><BR> a text string <B>SUMIF</B> looks for cells in  <B>test_range</B> that are equal to <B>condition</B>, unless <B>condition</B> is a text string that starts with a comparator <B>&gt;</B>, <B>&lt;</B>, <B>&gt;=</B>, <B>&lt;=</B>, <B>=</B>, <B>&lt;&gt;</B><BR> In this case <B>SUMIF</B> compares those cells in <B>test_range</B> with the remainder of the text string (interpreted as a number if possible or text otherwise).<BR><BR> For example the condition “<B>&gt;4.5</B>” tests if the content of each cell is greater than the number 4.5, and the condition “<B>&lt;dog</B>” tests if the content of each cell would come alphabetically before the text <B>dog</B>.<H2>Example</H2><B>SUMIF(A1:A9,&quot;&lt;0&quot;)</B><BR> returns the sum of the negative numbers in <B>A1A9</B>.<BR><BR><B>SUMIF(A1:A9, F1) </B><BR> where <B>F1</B> contains the text <B>&gt;=0</B> (without double quotes) returns the sum of the positive numbers in <B>A1A9</B>.<BR><BR><B>SUMIF(B2:B4, &quot;&lt;&quot;&amp;F2, C2:C4)</B><BR> where <B>F2</B> contains <B>10</B> and cells <B>B2</B>, <B>B3</B>, <B>B4</B> contain <B>7</B>, <B>9</B>, <B>11</B>, returns the sum of <B>C2</B> and <B>C3</B>, because cells <B>B2</B> and <B>B3</B> are less than <B>10</B>.<BR><BR><B>SUMIF(D1:D9, &quot;apples&quot;, E1E9)</B><BR> where cells in <B>D1D9</B> contain either <B>apples</B> or <B>pears</B> and cells in <B>E1E9</B> contain the corresponding quantities of each fruit, returns the total quantity of <B>apples</B>.<BR><BR><i>Advanced topic</i><BR><BR><B>SUMPRODUCT(D1:D9=&quot;Apples&quot;, E1:E9)</B>.<BR><BR> returns the sum of entries in <B>E1:E9</B> whose corresponding entry in <B>D1:D9</B> matches <B>Apples</B>, with case sensitivity (entries of <B>apples</B> and <B>APPLES</B> would not match).<BR><BR> See Conditional Counting and Summation for details.</BODY></HTML>";
		 else if(name.equals("SUMPRODUCT")) return "<HTML><BODY><H1>SUMPRODUCT </H1>Returns the sum of the products of corresponding array elements.<BR><BR> <H2>Syntax</H2><B>SUMPRODUCT(array1, array2, ... array30)</B><BR> <B>array1</B> to <B>array30</B> are up to 30 arrays or ranges of the same size whose corresponding elements are to be multiplied.<BR><BR>  You can use <B>SUMPRODUCT</B> to calculate the scalar product of two vectors.<BR><BR><i>Advanced topic</i><BR><BR><B>SUMPRODUCT</B> evaluates each parameter <B>array1</B> to <B>array30</B> as an array formula but does not need to be entered as an array formula.<BR><BR> In other words it can be entered with the Enter key, rather than Cntrl-Shift-Enter.<BR><BR> See the example below.<BR><BR> <B>SUMPRODUCT</B> can also be used to sum cells where a specified condition is true - see Conditional Counting and Summation and the example below.<BR><BR><H2>Example</H2><B>SUMPRODUCT(A1:B2, F1G2)</B> returns <B>A1</B>*<B>F1</B> + <B>B1</B>*<B>G1</B> + <B>A2</B>*<B>F2</B> + <B>B2</B>*<B>G2</B>.<BR><BR><i>Advanced topic</i><B>SUMPRODUCT(ABS(A1A6))</B><BR> when entered 'normally' (not as an array formula), returns the sum of the absolute values in cells <B>A1A6</B>.<BR><BR> <B>SUMPRODUCT</B> forces <B>ABS(A1A6)</B> to be evaluated as an array formula.<BR><BR><B>SUMPRODUCT(A1:A6=&quot;red&quot;, B1:B6=&quot;big&quot;, C1C6)</B><BR>returns the sum of cells in <B>C1C6</B> whose corresponding entries in the A column are <B>red</B> and in the B column are <B>big</B>.<BR><BR> This is not portable to Excel, as Excel ignores logical values.<BR><BR><B>SUMPRODUCT((A1:A6=&quot;red&quot;) * (B1:B6=&quot;big&quot;) * C1:C6)</B><BR>a version of <B>SUMPRODUCT(A1:A6=&quot;red&quot;, B1:B6=&quot;big&quot;, C1C6)</B> which is portable to Excel, as the logical values are converted to numbers during the multiplication.</BODY></HTML>";
		 else if(name.equals("SUMSQ")) return "<HTML><BODY><H1>SUMSQ</H1>Returns the sum of the squares of the arguments.<BR><BR><H2>Syntax</H2><B>SUMSQ(number1, number2, ....<BR><BR> number30)</B><BR> <B>number1</B> to <B>number30</B> are up to 30 numbers or ranges of numbers which are squared and then summed.<BR><BR><H2>Example</H2><B>SUMSQ(2, 3, 4)</B><BR> returns <B>29</B>, which is <B>2*2 + 3*3 + 4*4</B>.<BR><BR><B>SUMSQ(A1A2)</B><BR> where <B>A1</B> contains <B>1</B> and <B>A2</B> contains <B>2</B> returns <B>5</B>, which is <B>1*1 + 2*2</B>.</BODY></HTML>";
		 else if(name.equals("SUMX2MY2")) return "<HTML><BODY><H1>SUMX2MY2 </H1>Returns the sum of the differences between corresponding squared elements of two matrices.<BR><BR><H2>Syntax</H2><B>SUMX2MY2(x, y)</B><BR> <B>x</B> and <B>y</B> are arrays or ranges of the same size.<BR><BR> <i>Advanced topic</i><BR><BR><B>SUMX2MY2</B> evaluates its parameters <B>x</B> and <B>y</B> as array formulas but does not need to be entered as an array formula.<BR><BR> In other words it can be entered with the Enter key, rather than Cntrl-Shift-Enter.<BR><BR> See the example below.<BR><BR><H2>Example</H2><B>SUMX2MY2(A1:A2, {2|1})</B> where cells A1 and A2 contain <B>4</B>  and <B>3</B>  respectively, returns (4<sup>2</sup>-2<sup>2</sup>) + (3<sup>2</sup>-1<sup>2</sup>) = <B>20</B>.<BR><BR><i>Advanced topic</i><BR><BR><B>SUMX2MY2(A1:A2+1, {2|1})</B> when entered 'normally' (not as an array formula), and where cells A1 and A2 contain <B>3</B>  and <B>2</B>  respectively, returns ((3+1)<sup>2</sup>-2<sup>2</sup>) + ((2+1)<sup>2</sup>-1<sup>2</sup>) = <B>20</B>.<BR><BR> <B>SUMX2MY2</B> forces <B>(A1A2+1)</B> to be evaluated as an array formula (internally returning the array {4|3}).</BODY></HTML>";
		 else if(name.equals("SUMX2PY2")) return "<HTML><BODY><H1>SUMX2PY2 </H1>Returns the sum of the squares of all elements of two matrices.<BR><BR><H2>Syntax</H2><B>SUMX2PY2(x, y)</B><BR> <B>x</B> and <B>y</B> are arrays or ranges of the same size.<BR><BR><i>Advanced topic</i><BR><BR><B>SUMX2PY2</B> evaluates its parameters <B>x</B> and <B>y</B> as array formulas but does not need to be entered as an array formula.<BR><BR> In other words it can be entered with the Enter key, rather than Cntrl-Shift-Enter.<BR><BR> See the example below.<BR><BR><H2>Example</H2><B>SUMX2PY2(A1:A2, {2|1})</B> where cells A1 and A2 contain <B>4</B>  and <B>3</B>  respectively, returns (4<sup>2</sup>+2<sup>2</sup>) + (3<sup>2</sup>+1<sup>2</sup>) = <B>30</B>.<BR><BR><i>Advanced topic (parameter evaluated as array formula)<BR><BR></i><B>SUMX2PY2(A1:A2+1, {2|1})</B> when entered 'normally' (not as an array formula), and where cells A1 and A2 contain <B>3</B>  and <B>2</B>  respectively, returns ((3+1)<sup>2</sup>+2<sup>2</sup>) + ((2+1)<sup>2</sup>+1<sup>2</sup>) = <B>30</B>.<BR><BR> <B>SUMX2PY2</B> forces <B>(A1A2+1)</B> to be evaluated as an array formula (internally returning the array {4|3}).</BODY></HTML>";
		 else if(name.equals("SUMXMY2")) return "<HTML><BODY><H1>SUMXMY2 </H1>Returns the sum of the squared differences between corresponding elements of two matrices.<BR><BR><H2>Syntax</H2><B>SUMXMY2(x, y)</B><BR><B>x</B> and <B>y</B> are arrays or ranges of the same size.<BR><BR><i>Advanced topic</i><BR><BR><B>SUMXMY2</B> evaluates its parameters <B>x</B> and <B>y</B> as array formulas but does not need to be entered as an array formula.<BR><BR> In other words it can be entered with the Enter key, rather than Cntrl-Shift-Enter.<BR><BR> See the example below.<BR><BR><H2>Example</H2><B>SUMXMY2(A1:A2, {2|1})</B> where cells A1 and A2 contain <B>4</B>  and <B>3</B>  respectively, returns (4-2)<sup>2</sup> + (3-1)<sup>2</sup> = <B>8</B>.<BR><BR><i>Advanced topic (parameter evaluated as array formula)</i><BR><BR><B>SUMXMY2(A1:A2+1, {2|1})</B> when entered 'normally' (not as an array formula), and where cells A1 and A2 contain <B>3</B>  and <B>2</B>  respectively, returns ((3+1)-2)<sup>2</sup> + ((2+1)-1)<sup>2</sup> = <B>8</B>.<BR><BR> <B>SUMXMY2</B> forces <B>(A1A2+1)</B> to be evaluated as an array formula (internally returning the array {4|3}).</BODY></HTML>";
		 else if(name.equals("T")) return "<HTML><BODY><H1>T</H1>Returns the given text, or an empty text string if the target is not text.<BR><BR> <H2>Syntax</H2><B>T(value)</B><BR> if <B>value</B> is text, it is returned.<BR><BR>  if <B>value</B> is a number or a logical value, an empty text string <B>&quot;&quot;</B> is returned.<BR><BR><H2>Example</H2><B>T(&quot;red car&quot;)</B><BR> returns <B>red car</B>.<BR><BR><B>T(123.4)</B><BR> returns an empty text string.<BR><BR><B>ISTEXT(T(123.4))</B><BR> returns <B>TRUE</B>.<BR><BR><B>T(NA())</B><BR> returns the <B>#N/A</B> error.<BR><BR> Errors are propagated.</BODY></HTML>";
		 else if(name.equals("TAN")) return "<HTML><BODY><H1>TAN</H1>Returns the tangent of the given angle (in radians).<BR><BR><H2>Syntax</H2><B>TAN(angle)</B><BR> returns the (trigonometric) tangent of <B>angle</B>, the angle in radians.<BR><BR> To return the tangent of an angle in degrees, use the <B>RADIANS</B> function.<BR><BR><H2>Example</H2><B>TAN(PI()/4)</B><BR> returns <B>1</B>, the tangent of <B>PI/4</B> radians.<BR><BR><B>TAN(RADIANS(45))</B><BR> returns <B>1</B>, the tangent of <B>45</B> degrees.</BODY></HTML>";
		 else if(name.equals("TANH")) return "<HTML><BODY><H1>TANH</H1>Returns the hyperbolic tangent of a number.<BR><BR><H2>Syntax</H2><B>TANH(number)</B><BR> returns the hyperbolic tangent of <B>number</B>.<BR><BR><H2>Example</H2><B>TANH(0)</B><BR> returns <B>0</B>, the hyperbolic tangent of <B>0</B>.</BODY></HTML>";
		 else if(name.equals("TEXT")) return "<HTML><BODY><H1>TEXT</H1>Converts a number into text according to a given format.<BR><BR>  <H2>Syntax</H2><B>TEXT(number, format)</B><BR> returns <B>number</B> converted to text, according to the format code specified by <B>format</B>.<BR><BR> Example format codes are found in the Format - Cells... dialogue, in the box labelled Format Code.<BR><BR> These depend on your locale.<BR><BR> This function should therefore not be regarded as portable.<BR><BR><H2>Example</H2><B>TEXT(12.34567,&quot;###.##&quot;)</B><BR> returns the text <B>12.35</B>, if in your locale <B>###.##</B> is a format code meaning &quot;up to three integer digits and at most two decimal digits&quot;.</BODY></HTML>";
		 else if(name.equals("TIME")) return "<HTML><BODY><H1>TIME</H1>returns the time, given hours, minutes and seconds.<BR><BR> <H2>Syntax</H2><B>TIME(hours, minutes, seconds)</B><BR> returns the time, expressed as a date-time serial number.<BR><BR> <B>hours</B>, <B>minutes</B> and <B>seconds</B> are integers.<BR><BR> If <B>hours</B>, <B>minutes</B> and <B>seconds</B> are not within range for a valid time, the time will 'roll over', as shown below.<BR><BR><H2>Example</H2><B>TIME(9, 31, 20)</B><BR> returns the time 9:31:20 am (as a date-time serial number).<BR><BR><B>TIME(9, 31, 75)</B><BR> returns 9:32:15 am - the time rolls over, as there are only 60 seconds in a minute. </BODY></HTML>";
		 else if(name.equals("TODAY")) return "<HTML><BODY><H1>TODAY</H1>Returns the current date<H2>Syntax</H2><B>TODAY()</B><BR> returns the current date (as a date-time serial number).<BR><BR> <B>TODAY</B> is updated at every recalculation, for instance if a cell is modified.<BR><BR><H2>Example</H2><B>TODAY()</B><BR> when calculated at say 12 noon on 1. Apr 08 returns 1. Apr 08.</BODY></HTML>";
		 else if(name.equals("TRIM")) return "<HTML><BODY><H1>TRIM</H1>removes excess spaces from a text string.<BR><BR><H2>Syntax</H2><B>TRIM(text)</B><BR> returns <B>text</B> with any leading or trailing spaces removed, and with any multiple spaces replaced with a single space.<BR><BR><H2>Example</H2><B>TRIM(&quot;&nbsp;&nbsp;&nbsp;Good &nbsp;&nbsp;&nbsp;Morning&nbsp;&nbsp; &quot;)</B><BR> returns <B>Good Morning</B>.</BODY></HTML>";
		 else if(name.equals("TRUE")) return "<HTML><BODY><H1>TRUE </H1>Returns the logical value TRUE.<BR><BR> <H2>Syntax</H2><B>TRUE()</B><BR> The <B>TRUE()</B> function has no arguments, and always returns the logical value <B>TRUE</B>.<BR><BR><H2>Example</H2><B>TRUE()</B><BR> returns <B>TRUE</B><BR><BR><B>NOT(TRUE())</B><BR> returns  <B>FALSE</B></BODY></HTML>";
		 else if(name.equals("TRUNC")) return "<HTML><BODY><H1>TRUNC</H1>Truncates a number by removing decimal places.<BR><BR><H2>Syntax</H2><B>TRUNC(number, places)</B><BR> returns <B>number</B> with at most places decimal places.<BR><BR> Excess decimal places are simply removed, irrespective of sign.<BR><BR> <B>TRUNC(number, 0)</B> behaves as <B>INT(number)</B> for positive numbers, but effectively rounds towards zero for negative numbers.<BR><BR><H2>Example</H2><B>TRUNC(1.239, 2)</B><BR> returns <B>1.23</B>.<BR><BR> The <B>9</B> is lost.<BR><BR><B>TRUNC(-1.234999, 3)</B><BR> returns <B>-1.234</B>.<BR><BR> All the <B>9</B>s are lost.</BODY></HTML>";
		 else if(name.equals("UPPER")) return "<HTML><BODY><H1>UPPER</H1>Converts a text string to uppercase.<BR><BR><H2>Syntax</H2><B>UPPER(text)</B><BR> returns <B>text</B> with all characters converted to upper case.<BR><BR><H2>Example</H2><B>UPPER(&quot;Good Morning&quot;)</B><BR> returns <B>GOOD MORNING</B></BODY></HTML>";
		 else if(name.equals("VALUE")) return "<HTML><BODY><H1>VALUE</H1>Returns a number, given a text representation.<BR><BR>  <H2>Syntax</H2><B>VALUE(text)</B><BR> converts <B>text</B> to a number.<BR><BR> <B>text</B> may represent a number, including fractions, exponential notation and (locale dependent) decimal point and thousands separator; a percentage; or a date or time (the datetime serial number is returned).<BR><BR><H2>Example</H2><B>VALUE(&quot;12&quot;)</B><BR> returns <B>12</B> as a number.<BR><BR><B>VALUE(&quot;1,234.56&quot;)</B><BR> returns <B>1234.56</B> if your locale recognises the thousands separator ',' and decimal point '.<BR><BR>'.<BR><BR><B>VALUE(&quot;1 1/2&quot;)</B><BR> returns <B>1.5</B> (fraction).<BR><BR><B>VALUE(&quot;1E3&quot;)</B><BR> returns <B>1000</B> (exponential notation).<BR><BR><B>VALUE(&quot;50%&quot;)</B><BR> returns <B>0.5</B> (percentage).<BR><BR><B>VALUE(&quot;2009-04-03&quot;)</B><BR> returns the datetime serial number for 3rd April 2009.</BODY></HTML>";
		 else if(name.equals("VAR")) return "<HTML><BODY><H1>VAR</H1>Returns the sample variance.<BR><BR><H2>Syntax</H2><B>VAR(number1, number2, ... number30)</B><BR> <B>number1</B> to <B>number30</B> are up to 30 numbers or ranges containing numbers.<BR><BR> <B>VAR</B> returns the variance where <B>number1</B> to <B>number30</B> are a sample of the entire population.<H2>Example</H2><B>VAR(2, 6, 4)</B><BR> returns <B>4</B>.</BODY></HTML>";
		 else if(name.equals("VARP")) return "<HTML><BODY><H1>VARP</H1>Returns the population variance.<BR><BR><H2>Syntax</H2><B>VARP(number1, number2, ... number30)</B><BR> <B>number1</B> to <B>number30</B> are up to 30 numbers or ranges containing numbers.<BR><BR> <B>VARP</B> returns the standard deviation where <B>number1</B> to <B>number30</B> are the entire population.<BR><BR> If you only have a sample of the population use <B>VAR</B> instead.<H2>Example</H2><B>VARP(3, 3, 7, 7)</B><BR> returns <B>4</B>.</BODY></HTML>";
		 else if(name.equals("VLOOKUP")) return "<HTML><BODY><H1>VLOOKUP </H1>Returns a value from a table column, in the row found by lookup in the first column.<BR><BR><H2>Syntax</H2><B>VLOOKUP(lookupvalue, datatable, columnindex, mode)</B><BR> <B>lookupvalue</B> is a value (number, text or logical value) to look up in the left column of the range/array <B>datatable</B>.<BR><BR> When a value is matched in the left column, <B>VLOOKUP</B> returns the corresponding value (in the same row) in the <B>columnindex</B><sup>th</sup> column of <B>datatable</B>, where <B>columnindex</B> = 1 is the left column.<BR><BR> If <B>mode</B> is <B>0</B> or <B>FALSE</B>, the left column of  <B>datatable</B> may be unordered, and the first exact match is found (searching from the top).<BR><BR> If <B>mode</B> is 1 or <B>TRUE</B>, or is omitted, the left column of  <B>datatable</B> must be sorted, with numbers in ascending order appearing before text values in alphabetic order.<BR><BR> <B>VLOOKUP</B> decides where in the left column <B>lookupvalue</B> would appear.<BR><BR> If there is an exact match, that is the row found; if there is more than one exact match, the row found is <u>not necessarily nearest the top</u>.<BR><BR> If there is no exact match, the row above where <B>value</B> would appear in the left column is found; the <B>#N/A</B> error results if that row is not in the table.<H2>Examples</H2>In these examples, cells A1 to A5 contain <B>3</B>, <B>5</B>, <B>cat</B>, <B>mat</B>, <B>matter</B>, and cellsB1 to B5 contain <B>A</B>, <B>B</B>, <B>C</B>, <B>D</B>, <B>E</B>.<BR><BR><B>VLOOKUP(3, A1:B5, 2, 0)</B><BR> returns <B>A</B>.<BR><BR> Cell A1 in the left column matches <B>3</B>.<BR><BR> The contents of the corresponding cell in the 2<sup>nd</sup> column (that is, B1) are returned.<BR><BR> The left column happens to be sorted, but this is not necessary in mode <B>0</B>.<BR><BR><B>VLOOKUP(4, A1:B5, 2, 0)</B><BR> returns <B>#N/A</B>.<BR><BR> There is no match for <B>4</B>.<BR><BR><B>VLOOKUP(&quot;CAT&quot;, A1:B5, 2, 0)</B><BR> returns <B>C</B>.<BR><BR> The difference between lower and upper case is ignored, so <B>CAT</B> matches <B>cat</B>.<BR><BR><B>VLOOKUP(&quot;c.t&quot;, A1:B5; 2, 0)</B><BR> returns <B>C</B> if regular expressions are enabled (and <B>#N/A</B> if not).<BR><BR> The dot '.<BR><BR>' stands for 'any single character' in a regular expression, so <B>c.<BR><BR>t</B> matches <B>cat</B>.<BR><BR><B>VLOOKUP(&quot;.at&quot;, A1:B5, 2, 0)</B><BR> returns <B>C</B> if regular expressions are enabled.<BR><BR> <B>cat</B> matches; so does <B>mat</B>, but the match nearest the top is always found in mode <B>0</B>.<BR><BR><B>VLOOKUP(&quot;at&quot;, A1:B5, 2, 0)</B><BR> returns <B>#N/A</B> if '<i>Search criteria = and &lt;&gt; must apply to whole cells</i>' is enabled and <B>C</B> otherwise.<BR><BR> <B>at</B> does not match any whole cell contents, but it matches part of <B>cat</B>.<BR><BR><B>VLOOKUP(3, A1:B5, 2, 1)</B><BR>returns <B>A</B>.<BR><BR> Cell A1 in the left column matches <B>3</B>.<BR><BR> The left column must be sorted in mode <B>1</B>, with text coming after numbers.<BR><BR> <B>matter</B> follows <B>mat</B> because although the first letters are the same, <B>matter</B> has more letters.<BR><BR><B>VLOOKUP(4, A1:B5, 2, 1)</B><BR> returns <B>A</B>.<BR><BR> <B>4</B> would appear between <B>3</B> and <B>5</B> in the left column, so the position above is found.<BR><BR><B>VLOOKUP(1, A1:B5, 2, 1)</B><BR> returns <B>#N/A</B>.<BR><BR> <B>1</B> would appear before <B>3</B> in the left column, and there is no position above that in the table.<BR><BR><B>VLOOKUP(7, A1:B5, 2, 1)</B><BR> returns <B>B</B>.<BR><BR> <B>7</B> would appear between <B>5</B> and <B>cat</B> in the left column, so the position above is found.<BR><BR><B>VLOOKUP(&quot;apple&quot;, A1:B5, 2, 1)</B><BR> returns <B>B</B>.<BR><BR> <B>apple</B> would appear between <B>5</B> and <B>cat</B> in the left column, so the position above is found.<BR><BR><B>VLOOKUP(&quot;mate&quot;, A1:B5, 2, 1)</B><BR> returns <B>D</B>.<BR><BR> <B>mate</B> would appear between <B>mat</B> and <B>matter</B> in the left column, so the position above is found.<BR><BR><B>VLOOKUP(&quot;rat&quot;, A1:B5, 2, 1)</B><BR> returns <B>E</B>.<BR><BR> <B>rat</B> would appear after <B>matter</B> in the left column, so the position above is found.<BR><BR><B>VLOOKUP(&quot;at&quot;, A1:B5, 2, 1)</B><BR> returns <B>B</B>, even if '<i>Search criteria = and &lt;&gt; must apply to whole cells</i>' is disabled.<BR><BR> In this case the match between <B>at</B> and <B>cat</B> is ignored in favour of treating <B>at</B> as a word to come between <B>5</B> and <B>cat</B>.</BODY></HTML>";
		 else if(name.equals("WORKDAY")) return "<HTML><BODY><H1>WORKDAY</H1>Returns a date a given number of workdays away.<BR><BR> <H2>Syntax</H2><B>WORKDAY(startdate, days, hols_range)</B><BR> returns the date that is <B>days</B> workdays after the given date <B>startdate</B>.<BR><BR> <B>days</B> is a number (which may be negative to find a date before <B>startdate</B>).<BR><BR> Saturday and Sunday are assumed to be non-working days.<BR><BR> <B>hols_range</B> (optional) is a range containing dates of other non-working days.<BR><BR> <H2>Example</H2><B>WORKDAY(DATE(2008,09,05), 1)</B><BR> returns the date-time serial number for Monday 8. Sep 08.<BR><BR> 5. Sep 08 is a Friday.<BR><BR><B>WORKDAY(DATE(2008-09-05), 1, D1:D2)</B><BR> where D1 contains 8. Sep 08 and D2 contains 25. Dec 08, returns the date-time serial number for 9. Sep 08.<BR><BR> The 8. Sep 08 is specified as a holiday.</BODY></HTML>";
		 else if(name.equals("YEAR")) return "<HTML><BODY><H1>YEAR</H1>Returns the year of a given date.<BR><BR> <H2>Syntax</H2><B>YEAR(date)</B><BR> returns the year of <B>date</B> as a number.<BR><BR> <B>date</B> may be text or a date-time serial number.<BR><BR><H2>Example</H2><B>YEAR(DATE(2008,06,04)</B><BR> returns <B>2008</B>.<BR><BR><B>YEAR(A1)</B><BR> where cell A1 contains the date <B>23. Nov 83</B> as a date-time serial number, returns <B>1983</B>.</BODY></HTML>";
		 else if(name.equals("YEARFRAC")) return "<HTML><BODY><H1>YEARFRAC</H1>Returns the number of years including fraction between two dates.<H2>Syntax</H2><B>YEARFRAC(startdate, enddate, basis)</B><BR> returns the number of years between the <B>startdate</B> and <B>enddate</B>; <B>basis</B> is an integer specifying the system of how many days are in a month or year, as follows: <TABLE border=\"0\" cellpadding=\"5\" cellspacing=\"0\" style=\"margin 1em auto 1em auto\"><TR><TD><B>basis</B></TD><TD><B>day counting system</B></TD></TR><TR><TD align=\"center\">0</TD><TD>US (NASD) system. 30 days/month, 360 days/year (30/360)</TD></TR><TR><TD align=\"center\">1</TD><TD>Actual/actual</TD></TR><TR><TD align=\"center\">2</TD><TD>Actual/360</TD></TR><TR><TD align=\"center\">3</TD><TD>Actual/365</TD></TR><TR><TD align=\"center\">4</TD><TD>European 30/360</TD></TR></TABLE><H2>Example</H2><B>YEARFRAC(DATE(2007,01,01),DATE(2009,07,01),0)</B><BR> returns <B>2.5</B>.<BR><BR><B>YEARFRAC(DATE(2008,01,01),DATE(2008,07,01),3)</B><BR> returns <B>0.498630136986</B>.</BODY></HTML>";
		 else if(name.equals("YIELD")) return "<HTML><BODY><H1>YIELD</H1>Calculates the yield for an interest paying security.<H2>Syntax</H2><B>YIELD(settlementdate, maturitydate, rate, price, redemptionvalue, frequency, basis)</B><BR><BR><B>settlementdate:</B> the settlement (purchase) date of the security.<BR><BR><B>maturitydate:</B> the maturity (redemption) date of the security.<BR><BR><B>rate:</B> the (annual) coupon rate of the security.<BR><BR><B>price:</B> the price of the security, per 100 par value.<BR><BR><B>redemptionvalue:</B> the redemption value of the security, per 100 par value.<BR><BR><B>frequency:</B>number of interest payments per year (1, 2 or 4).<BR><BR> <B>basis</B> is an integer specifying the system of how many days are in a month or year, as follows: <TABLE border=\"0\" cellpadding=\"5\" cellspacing=\"0\" style=\"margin 1em auto 1em auto\"><TR><TD><B>basis</B></TD><TD><B>day counting system</B></TD></TR><TR><TD align=\"center\">0</TD><TD>US (NASD) system. 30 days/month, 360 days/year (30/360)</TD></TR><TR><TD align=\"center\">1</TD><TD>Actual/actual</TD></TR><TR><TD align=\"center\">2</TD><TD>Actual/360</TD></TR><TR><TD align=\"center\">3</TD><TD>Actual/365</TD></TR><TR><TD align=\"center\">4</TD><TD>European 30/360</TD></TR></TABLE><H2>Example</H2><B>YIELD(DATE(2008,02,15), DATE(2010,11,15), 0.05, 95, 100, 2, 0)</B><BR> returns approximately <B>0.070</B>.</BODY></HTML>";
		 else if(name.equals("PRICE")) return "<HTML><BODY><H1>PRICE</H1>Calculates a quoted price for an interest paying security, per 100 currency units par value. <H2>Syntax</H2><B>PRICE(settlementdate, maturitydate, rate, yield, redemptionvalue, frequency, basis)</B><BR><BR><B>settlementdate:</B> the settlement (purchase) date of the security.<BR><BR><B>maturitydate:</B> the maturity (redemption) date of the security.<BR><BR><B>rate:</B> the (annual) coupon rate of the security.<BR><BR><B>yield:</B> the required annual rate of return (compounded at each interest payment).<BR><BR><B>redemptionvalue:</B> the redemption value of the security, per 100 par value.<BR><BR><B>frequency:</B>number of interest payments per year (1, 2 or 4).<BR><BR> <B>basis</B> is an integer specifying the system of how many days are in a month or year, as follows: <TABLE border=\"0\" cellpadding=\"5\" cellspacing=\"0\" style=\"margin 1em auto 1em auto\"><TR><TD><B>basis</B></TD><TD><B>day counting system</B></TD></TR><TR><TD align=\"center\">0</TD><TD>US (NASD) system. 30 days/month, 360 days/year (30/360)</TD></TR><TR><TD align=\"center\">1</TD><TD>Actual/actual</TD></TR><TR><TD align=\"center\">2</TD><TD>Actual/360</TD></TR><TR><TD align=\"center\">3</TD><TD>Actual/365</TD></TR><TR><TD align=\"center\">4</TD><TD>European 30/360</TD></TR></TABLE><H2>Example</H2><B>PRICE(DATE(2008,02,15), DATE(2010,11,15), 0.05, 0.07, 100, 2, 0)</B><BR> returns approximately <B>95.06</B>.</BODY></HTML>";
		 else if(name.equals("ACCRINT")) return "<HTML><BODY><H1>ACCRINT</H1>Calculates the accrued interest for a security with periodic interest payments.<H2>Syntax</H2><B>ACCRINT(issue, first_interest, settlement, rate, par, frequency, basis)</B><BR><BR><B>issue:</B> the issue date of the security.<BR><BR><B>first_interest:</B> the first interest date of the security.<BR><BR><B>settlement:</B> the date at which the interest accrued up until then is to be calculated.<BR><BR><B>rate:</B> the annual nominal rate of interest (coupon interest rate)<BR><BR><B>par:</B> the par value of the security. <BR><BR><B>frequency:</B>number of interest payments per year (1, 2 or 4).<BR><BR> <B>basis</B> is an integer specifying the system of how many days are in a month or year, as follows: <TABLE border=\"0\" cellpadding=\"5\" cellspacing=\"0\" style=\"margin 1em auto 1em auto\"><TR><TD><B>basis</B></TD><TD><B>day counting system</B></TD></TR><TR><TD align=\"center\">0</TD><TD>US (NASD) system. 30 days/month, 360 days/year (30/360)</TD></TR><TR><TD align=\"center\">1</TD><TD>Actual/actual</TD></TR><TR><TD align=\"center\">2</TD><TD>Actual/360</TD></TR><TR><TD align=\"center\">3</TD><TD>Actual/365</TD></TR><TR><TD align=\"center\">4</TD><TD>European 30/360</TD></TR></TABLE><H2>Example</H2><B>ACCRINT(DATE(2001,2,28),DATE(2001,8,31), DATE(2001,5,1), 0.1, 1000, 2, 0)</B><BR> returns approximately <B>16.94444</B>.</BODY></HTML>";
		 else if(name.equals("ACCRINTM")) return "<HTML><BODY><H1>ACCRINTM</H1>Calculates the accrued interest for a security that pays at maturity. <H2>Syntax</H2><B>ACCRINTM(issue, settlement, rate, par, basis)</B><BR><BR><B>issue:</B> the issue date of the security.<BR><BR><B>settlement:</B> the date at which the interest accrued up until then is to be calculated.<BR><BR><B>rate:</B> the annual nominal rate of interest (coupon interest rate)<BR><BR><B>par:</B> the par value of the security.<BR><BR> <B>basis</B> is an integer specifying the system of how many days are in a month or year, as follows: <TABLE border=\"0\" cellpadding=\"5\" cellspacing=\"0\" style=\"margin 1em auto 1em auto\"><TR><TD><B>basis</B></TD><TD><B>day counting system</B></TD></TR><TR><TD align=\"center\">0</TD><TD>US (NASD) system. 30 days/month, 360 days/year (30/360)</TD></TR><TR><TD align=\"center\">1</TD><TD>Actual/actual</TD></TR><TR><TD align=\"center\">2</TD><TD>Actual/360</TD></TR><TR><TD align=\"center\">3</TD><TD>Actual/365</TD></TR><TR><TD align=\"center\">4</TD><TD>European 30/360</TD></TR></TABLE><H2>Example</H2><B>ACCRINTM(DATE(2001,4,1),DATE(2001,6,15), 0.1, 1000, 3)</B><BR> returns approximately <B>20.54795</B>.</BODY></HTML>";
		 else if(name.equals("TBILLYIELD")) return "<HTML><BODY><H1>TBILLYIELD</H1>Returns the yield for a US Treasury bill. <H2>Syntax</H2><B>TBILLYIELD(settlementdate, maturitydate, issueprice)</B><BR><BR><B>settlementdate:</B> the settlement (purchase) date of the Treasury bill.<BR><BR><B>maturitydate:</B> the maturity (redemption) date of the Treasury bill.  <BR><BR><B>issueprice:</B> the issue price of the Treasury bill per $100 of par value.<BR><BR>A Treasury bill is a short term (up to a year) Government security, sold at a discount to its par value (face value). It pays no interest and is redeemed at par value.<BR>The Treasury bill here has a 360 day year basis.<BR>The yield is calculated as:<BR><BR>( (100 - <B>issueprice</B>) / <B>issueprice</B> ) * (360 / <B>number of days in the term</B>)<BR><BR>where <B>number of days in the term</B> are the number of days between <B>settlementdate</B> and <B>maturitydate</B> according to the 360 days per year basis..<BR><BR>An error results if the term given is not less than one year.<H2>Example</H2><B>TBILLYIELD(DATE(2008,07,14), DATE(2009,01,14), 96)</B><BR> returns approximately <B>0.08152</B>.</BODY></HTML>";
		 else if(name.equals("TBILLEQ")) return "<HTML><BODY><H1>TBILLEQ</H1>Returns the bond-equivalent-yield (BEY) for a US Treasury bill.  <H2>Syntax</H2><B>TBILLEQ(settlementdate, maturitydate, discount)</B><BR><BR><B>settlementdate:</B> the settlement (purchase) date of the Treasury bill.<BR><BR><B>maturitydate:</B> the maturity (redemption) date of the Treasury bill.<BR><BR><B>discountrate:</B> the discount rate of the Treasury bill. <BR><BR>A Treasury bill is a short term (up to a year) Government security, sold at a discount to its par value (face value). It pays no interest and is redeemed at par value.<BR>This function calculates the yield that a bond would need, in order to provide growth equivalent to the Treasury bill. The bond considered assumes 365 days in the year, and pays interest only at the end of the term (ie interest is not compounded).<BR>The Treasury bill here has a 360 day year basis.<BR>The formula for <B>TBILLEQ</B> is :<BR><BR>365 * <B>discountrate</B> / (360 - <B>discountrate</B> * <B>number of days in the term</B>)<BR><BR>where <B>number of days in the term</B> are the number of days between <B>settlementdate</B> and <B>maturitydate</B> according to the 360 days per year basis..<BR><BR>An error results if the term given is not less than one year.<H2>Example</H2><B>TBILLEQ(DATE(2008,07,14), DATE(2009,01,14), 0.04)</B><BR> returns approximately <B>0.0414</B>.</BODY></HTML>";
		 else if(name.equals("TBILLPRICE")) return "<HTML><BODY><H1>TBILLPRICE</H1>Returns the issue price for a US Treasury bill, per $100 par value, given a discount rate.<H2>Syntax</H2><B>TBILLPRICE(settlementdate, maturitydate, discountrate)</B><BR><BR><B>settlementdate:</B> the settlement (purchase) date of the Treasury bill.<BR><BR><B>maturitydate:</B> the maturity (redemption) date of the Treasury bill.<BR><BR><B>discountrate:</B> the discount rate of the Treasury bill. <BR><BR>A Treasury bill is a short term (up to a year) Government security, sold at a discount to its par value (face value). It pays no interest and is redeemed at par value.<BR>The Treasury bill here has a 360 day year basis.<BR>The formula for <B>TBILLPRICE</B> is :<BR><BR>100 * ( 1 - (<B>discountrate</B> * <B>number of days in the term</B> / 360) )<BR><BR>where <B>number of days in the term</B> are the number of days between <B>settlementdate</B> and <B>maturitydate</B> according to the 360 days per year basis..<BR><BR>An error results if the term given is not less than one year.<H2>Example</H2><B>TBILLPRICE(DATE(2008,07,14), DATE(2009,01,14), 0.04)</B><BR> returns approximately <B>97.96</B>.</BODY></HTML>";
		 else if(name.equals("PRICEMAT")) return "<HTML><BODY><H1>PRICEMAT</H1>Calculates a price (per 100 currency units par value) for a bond that pays interest on maturity.  <H2>Syntax</H2><B>PRICEMAT(settlementdate, maturitydate, issuedate, rate, yield, basis)</B><BR><BR><B>settlementdate:</B> the settlement (purchase) date of the security.<BR><BR><B>maturitydate:</B> the maturity (redemption) date of the security.<BR><BR><B>issuedate:</B> the original issue date of the bond.<BR><BR><B>rate:</B> the (annual) interest rate of the bond (interest only paid at maturity). <BR><BR><B>yield:</B> the (annual) yield of the bond.<BR><BR> <B>basis</B> is an integer specifying the system of how many days are in a month or year, as follows: <TABLE border=\"0\" cellpadding=\"5\" cellspacing=\"0\" style=\"margin 1em auto 1em auto\"><TR><TD><B>basis</B></TD><TD><B>day counting system</B></TD></TR><TR><TD align=\"center\">0</TD><TD>US (NASD) system. 30 days/month, 360 days/year (30/360)</TD></TR><TR><TD align=\"center\">1</TD><TD>Actual/actual</TD></TR><TR><TD align=\"center\">2</TD><TD>Actual/360</TD></TR><TR><TD align=\"center\">3</TD><TD>Actual/365</TD></TR><TR><TD align=\"center\">4</TD><TD>European 30/360</TD></TR></TABLE><H2>Example</H2><B>PRICEMAT(DATE(2007,02,15),DATE(2007,04,06), DATE(2007,01,06), 0.05, 0.06, 0)</B><BR> returns approximately <B>99.85</B>. You purchase and settle a bond on 15 February 2007; the (90 day) bond was issued on 6th January 2007 and will mature on 6th April 2007, yielding its face value of $1000 and an interest payment of $1000 * 5%*90/360. Choosing a yield of 6% per annum, the value of the bond on 15 February 2007 is $998.50 using the basis 0 date system. </BODY></HTML>";
		 else if(name.equals("YIELDMAT")) return "<HTML><BODY><H1>YIELDMAT</H1>Calculates the yield for a bond that pays interest on maturity.<H2>Syntax</H2><B>YIELDMAT(settlementdate, maturitydate, issuedate, rate, price, basis)</B><BR><BR><B>settlementdate:</B> the settlement (purchase) date of the security.<BR><BR><B>maturitydate:</B> the maturity (redemption) date of the security.<BR><BR><B>issuedate:</B> the original issue date of the bond. <BR><BR><B>rate:</B> the (annual) interest rate of the bond (interest only paid at maturity). <BR><BR><B>price:</B> the price of the security, per 100 par value.<BR><BR><B>redemptionvalue:</B> the redemption value of the security, per 100 par value.<BR><BR> <B>basis</B> is an integer specifying the system of how many days are in a month or year, as follows: <TABLE border=\"0\" cellpadding=\"5\" cellspacing=\"0\" style=\"margin 1em auto 1em auto\"><TR><TD><B>basis</B></TD><TD><B>day counting system</B></TD></TR><TR><TD align=\"center\">0</TD><TD>US (NASD) system. 30 days/month, 360 days/year (30/360)</TD></TR><TR><TD align=\"center\">1</TD><TD>Actual/actual</TD></TR><TR><TD align=\"center\">2</TD><TD>Actual/360</TD></TR><TR><TD align=\"center\">3</TD><TD>Actual/365</TD></TR><TR><TD align=\"center\">4</TD><TD>European 30/360</TD></TR></TABLE><H2>Example</H2><B>YIELDMAT(DATE(2007,02,15), DATE(2007,04,06), DATE(2007,01,06), 0.05, 99, 0)</B><BR> returns approximately <B>0.1211</B>. You purchase and settle a bond on 15 February 2007; the (90 day) bond was issued on 6th January 2007 and will mature on 6th April 2007, yielding its face value of $1000 and an interest payment of $1000 * 5%*90/360. The price is 99, giving a value of $990; the yield to maurity is about 12.11%. </BODY></HTML>";
		 else if(name.equals("ODDFYIELD")) return "<HTML><BODY><H1>ODDFYIELD</H1>Returns the yield of a security, where the time to the first interest payment is not a whole period.<H2>Syntax</H2><B>ODDFYIELD(settlementdate, maturitydate, issuedate, firstinterestdate, rate, price, redemptionvalue, frequency, basis)</B><BR><BR><B>settlementdate:</B> the settlement (purchase) date of the security.<BR><BR><B>maturitydate:</B> the maturity date of the security.<BR><BR><B>issuedate:</B> the original issue date of the bond.<BR><BR><B>firstinterestdate:</B> the date on which the security first pays interest. <BR><BR><B>rate:</B> the interest rate of the security.  <BR><BR><B>price:</B> the price of the security. <BR><BR><B>redemptionvalue:</B> the redemption value of the security per 100 currency units of face value.<BR><BR><B>frequency:</B>number of interest payments per year (1, 2 or 4). <BR><BR> <B>basis</B> is an integer specifying the system of how many days are in a month or year, as follows: <TABLE border=\"0\" cellpadding=\"5\" cellspacing=\"0\" style=\"margin 1em auto 1em auto\"><TR><TD><B>basis</B></TD><TD><B>day counting system</B></TD></TR><TR><TD align=\"center\">0</TD><TD>US (NASD) system. 30 days/month, 360 days/year (30/360)</TD></TR><TR><TD align=\"center\">1</TD><TD>Actual/actual</TD></TR><TR><TD align=\"center\">2</TD><TD>Actual/360</TD></TR><TR><TD align=\"center\">3</TD><TD>Actual/365</TD></TR><TR><TD align=\"center\">4</TD><TD>European 30/360</TD></TR></TABLE><H2>Example</H2><B>ODDFYIELD(DATE(2008,11,11), DATE(2021,3,1), DATE(2008,10,15), DATE(2009,3,1), 0.0575, 84.5, 100, 2, 0)</B><BR> returns approximately <B>0.077245542</B>.</BODY></HTML>";
		 else if(name.equals("ODDFPRICE")) return "<HTML><BODY><H1>ODDFPRICE</H1>Returns the value of a security per 100 currency units of face value, where the time to the first interest payment is not a whole period.<H2>Syntax</H2><B>ODDFPRICE(settlementdate, maturitydate, issuedate, firstinterestdate, rate, yield, redemptionvalue, frequency, basis)</B><BR><BR><B>settlementdate:</B> the settlement (purchase) date of the security.<BR><BR><B>maturitydate:</B> the maturity date of the security.<BR><BR><B>issuedate:</B> the original issue date of the bond.<BR><BR><B>firstinterestdate:</B> the date on which the security first pays interest. <BR><BR><B>rate:</B> the interest rate of the security.  <BR><BR><B>yield:</B>  the annual yield of the security.<BR><BR><B>redemptionvalue:</B> the redemption value of the security per 100 currency units of face value.<BR><BR><B>frequency:</B>number of interest payments per year (1, 2 or 4). <BR><BR> <B>basis</B> is an integer specifying the system of how many days are in a month or year, as follows: <TABLE border=\"0\" cellpadding=\"5\" cellspacing=\"0\" style=\"margin 1em auto 1em auto\"><TR><TD><B>basis</B></TD><TD><B>day counting system</B></TD></TR><TR><TD align=\"center\">0</TD><TD>US (NASD) system. 30 days/month, 360 days/year (30/360)</TD></TR><TR><TD align=\"center\">1</TD><TD>Actual/actual</TD></TR><TR><TD align=\"center\">2</TD><TD>Actual/360</TD></TR><TR><TD align=\"center\">3</TD><TD>Actual/365</TD></TR><TR><TD align=\"center\">4</TD><TD>European 30/360</TD></TR></TABLE><H2>Example</H2><B>ODDFPRICE(DATE(2008,11,11), DATE(2021,3,1), DATE(2008,10,15), DATE(2009,3,1), 0.0785, 0.0625, 100, 2, 1)</B><BR> returns approximately <B>113.5977</B>.</BODY></HTML>";
		 else if(name.equals("ODDLYIELD")) return "<HTML><BODY><H1>ODDLYIELD</H1>Returns the yield of a security, where the last interest payment is not a whole period.<H2>Syntax</H2><B>ODDLYIELD(settlementdate, maturitydate, lastinterestdate, rate, price, redemptionvalue, frequency, basis)</B><BR><BR><B>settlementdate:</B> the settlement (purchase) date of the security.<BR><BR><B>maturitydate:</B> the maturity date of the security.<BR><BR><B>lastinterestdate:</B> the date on which the security last pays interest.  <BR><BR><B>rate:</B> the interest rate of the security.  <BR><BR><B>price:</B> the price of the security. <BR><BR><B>redemptionvalue:</B> the redemption value of the security per 100 currency units of face value.<BR><BR><B>frequency:</B>number of interest payments per year (1, 2 or 4). <BR><BR> <B>basis</B> is an integer specifying the system of how many days are in a month or year, as follows: <TABLE border=\"0\" cellpadding=\"5\" cellspacing=\"0\" style=\"margin 1em auto 1em auto\"><TR><TD><B>basis</B></TD><TD><B>day counting system</B></TD></TR><TR><TD align=\"center\">0</TD><TD>US (NASD) system. 30 days/month, 360 days/year (30/360)</TD></TR><TR><TD align=\"center\">1</TD><TD>Actual/actual</TD></TR><TR><TD align=\"center\">2</TD><TD>Actual/360</TD></TR><TR><TD align=\"center\">3</TD><TD>Actual/365</TD></TR><TR><TD align=\"center\">4</TD><TD>European 30/360</TD></TR></TABLE><H2>Example</H2><B>ODDLYIELD(DATE(2008,4,20), DATE(2008,6,15), DATE(2007,12,24), 0.0375, 99.875, 100, 2, 0)</B><BR> returns approximately <B>0.045192 </B>.</BODY></HTML>";
		 else if(name.equals("ODDLPRICE")) return "<HTML><BODY><H1>ODDLPRICE</H1>Returns the value of a security per 100 currency units of face value, where the last interest payment is not a whole period.<H2>Syntax</H2><B>ODDLPRICE(settlementdate, maturitydate, lastinterestdate, rate, yield, redemptionvalue, frequency, basis)</B><BR><BR><B>settlementdate:</B> the settlement (purchase) date of the security.<BR><BR><B>maturitydate:</B> the maturity date of the security.<BR><BR><B>lastinterestdate:</B> the date on which the security last pays interest.  <BR><BR><B>rate:</B> the interest rate of the security.  <BR><BR><B>yield:</B>  the annual yield of the security.<BR><BR><B>redemptionvalue:</B> the redemption value of the security per 100 currency units of face value.<BR><BR><B>frequency:</B>number of interest payments per year (1, 2 or 4). <BR><BR> <B>basis</B> is an integer specifying the system of how many days are in a month or year, as follows: <TABLE border=\"0\" cellpadding=\"5\" cellspacing=\"0\" style=\"margin 1em auto 1em auto\"><TR><TD><B>basis</B></TD><TD><B>day counting system</B></TD></TR><TR><TD align=\"center\">0</TD><TD>US (NASD) system. 30 days/month, 360 days/year (30/360)</TD></TR><TR><TD align=\"center\">1</TD><TD>Actual/actual</TD></TR><TR><TD align=\"center\">2</TD><TD>Actual/360</TD></TR><TR><TD align=\"center\">3</TD><TD>Actual/365</TD></TR><TR><TD align=\"center\">4</TD><TD>European 30/360</TD></TR></TABLE><H2>Example</H2><B>ODDLPRICE(DATE(1990,6,1), DATE(1995,12,31), DATE(1990,1,1), 0.02, 0.015, 100, 4, 1)</B><BR> returns approximately <B>102,5098845</B>.</BODY></HTML>";
		 else if(name.equals("DURATION")) return "<HTML><BODY><H1>DURATION</H1>Returns the Macaulay duration of a security. <H2>Syntax</H2><B>DURATION(settlementdate, maturitydate, rate, yield, frequency, basis)</B><BR><BR><B>settlementdate:</B> the settlement (purchase) date of the security.<BR><BR><B>maturitydate:</B> the maturity (redemption) date of the security.<BR><BR><B>rate:</B> the (annual) coupon rate of the security.<BR><BR><B>yield:</B> the required annual rate of return (compounded at each interest payment).<BR><BR><B>frequency: </B>number of interest payments per year (1, 2 or 4).<BR><BR> <B>basis</B> is an integer specifying the system of how many days are in a month or year, as follows: <TABLE border=\"0\" cellpadding=\"5\" cellspacing=\"0\" style=\"margin 1em auto 1em auto\"><TR><TD><B>basis</B></TD><TD><B>day counting system</B></TD></TR><TR><TD align=\"center\">0</TD><TD>US (NASD) system. 30 days/month, 360 days/year (30/360)</TD></TR><TR><TD align=\"center\">1</TD><TD>Actual/actual</TD></TR><TR><TD align=\"center\">2</TD><TD>Actual/360</TD></TR><TR><TD align=\"center\">3</TD><TD>Actual/365</TD></TR><TR><TD align=\"center\">4</TD><TD>European 30/360</TD></TR></TABLE><H2>Example</H2><B>DURATION(DATE(2008,02,28), DATE(2010,8,31), 0.05, 0.06,  2, 0)</B><BR> returns approximately <B>2.33</B> years.</BODY></HTML>";
		 else if(name.equals("MDURATION")) return "<HTML><BODY><H1>MDURATION</H1>Calculates the modified duration of a security.  <H2>Syntax</H2><B>MDURATION(settlementdate, maturitydate, rate, yield, frequency, basis)</B><BR><BR><B>settlementdate:</B> the settlement (purchase) date of the security.<BR><BR><B>maturitydate:</B> the maturity (redemption) date of the security.<BR><BR><B>rate:</B> the (annual) coupon rate of the security.<BR><BR><B>yield:</B> the required annual rate of return (compounded at each interest payment).<BR><BR><B>frequency: </B>number of interest payments per year (1, 2 or 4).<BR><BR> <B>basis</B> is an integer specifying the system of how many days are in a month or year, as follows: <TABLE border=\"0\" cellpadding=\"5\" cellspacing=\"0\" style=\"margin 1em auto 1em auto\"><TR><TD><B>basis</B></TD><TD><B>day counting system</B></TD></TR><TR><TD align=\"center\">0</TD><TD>US (NASD) system. 30 days/month, 360 days/year (30/360)</TD></TR><TR><TD align=\"center\">1</TD><TD>Actual/actual</TD></TR><TR><TD align=\"center\">2</TD><TD>Actual/360</TD></TR><TR><TD align=\"center\">3</TD><TD>Actual/365</TD></TR><TR><TD align=\"center\">4</TD><TD>European 30/360</TD></TR></TABLE><H2>Example</H2><B>MDURATION(DATE(2008,02,28), DATE(2010,8,31), 0.05, 0.06,  2, 0)</B><BR> returns approximately <B>2.26</B> years.</BODY></HTML>";
		 else if(name.equals("ODDFPRICE")) return "<HTML><BODY><H1>ODDFPRICE</H1>Returns the value of a security per 100 currency units of face value, where the time to the first interest payment is not a whole period. <H2>Syntax</H2><B>ODDFPRICE(settlementdate, maturitydate, issuedate, firstinterestdate, rate, yield, redemptionvalue, frequency, basis)</B><BR><BR><B>settlementdate:</B> the settlement (purchase) date of the security.<BR><BR><B>maturitydate:</B> the maturity date of the security.<BR><BR><B>issuedate:</B> the original issue date of the bond.<BR><BR><B>firstinterestdate:</B> the date on which the security first pays interest. <BR><BR><B>rate:</B> the interest rate of the security.  <BR><BR><B>yield:</B> the annual yield of the security. <BR><BR><B>redemptionvalue:</B> the redemption value of the security per 100 currency units of face value.<BR><BR><B>frequency:</B>number of interest payments per year (1, 2 or 4). <BR><BR> <B>basis</B> is an integer specifying the system of how many days are in a month or year, as follows: <TABLE border=\"0\" cellpadding=\"5\" cellspacing=\"0\" style=\"margin 1em auto 1em auto\"><TR><TD><B>basis</B></TD><TD><B>day counting system</B></TD></TR><TR><TD align=\"center\">0</TD><TD>US (NASD) system. 30 days/month, 360 days/year (30/360)</TD></TR><TR><TD align=\"center\">1</TD><TD>Actual/actual</TD></TR><TR><TD align=\"center\">2</TD><TD>Actual/360</TD></TR><TR><TD align=\"center\">3</TD><TD>Actual/365</TD></TR><TR><TD align=\"center\">4</TD><TD>European 30/360</TD></TR></TABLE><H2>Example</H2><B>ODDFPRICE(DATE(1990,6,1), DATE(1995,12,31), DATE(1990,1,1), DATE(1990,12,31), 0.06, 0.05, 1000, 2, 0)</B><BR> returns approximately <B>787.86</B>. The result is different from Excel. I would not trust this implementation!</BODY></HTML>";
		 else if(name.equals("COUPDAYS")) return "<HTML><BODY><H1>COUPDAYS</H1>Returns the number of days in the coupon period that contains the settlement date. <H2>Syntax</H2><B>COUPDAYS(settlementdate, maturitydate, frequency, basis)</B><BR><BR><B>settlementdate:</B> the settlement (purchase) date of the security.<BR><BR><B>maturitydate:</B> the maturity date of the security.<BR><BR><B>frequency: </B>number of interest payments per year (1, 2 or 4). <BR><BR> <B>basis</B> is an integer specifying the system of how many days are in a month or year, as follows: <TABLE border=\"0\" cellpadding=\"5\" cellspacing=\"0\" style=\"margin 1em auto 1em auto\"><TR><TD><B>basis</B></TD><TD><B>day counting system</B></TD></TR><TR><TD align=\"center\">0</TD><TD>US (NASD) system. 30 days/month, 360 days/year (30/360)</TD></TR><TR><TD align=\"center\">1</TD><TD>Actual/actual</TD></TR><TR><TD align=\"center\">2</TD><TD>Actual/360</TD></TR><TR><TD align=\"center\">3</TD><TD>Actual/365</TD></TR><TR><TD align=\"center\">4</TD><TD>European 30/360</TD></TR></TABLE><H2>Example</H2><B>COUPDAYS(DATE(2007,1,25), DATE(2009,11,15), 2, 4)</B><BR> returns <B>180</B>. A bond is originally issued on 15 November 1999, with a ten year term; the date of maturity is 15 November 2009. You subsequently purchase it on the secondary market, with a settlement date of 25 January 2007; Interest is paid half-yearly (<B>frequency</B> is 2); thus interest is due on the 15 May and the 15 November each year, during the bond's term. Using basis 4, there are 180 days (= 6 * 30) in the interest period in which the settlement date falls (16 November 2006 to 15 May 2007 inclusive = 6 months). </BODY></HTML>";
		 else if(name.equals("COUPDAYBS")) return "<HTML><BODY><H1>COUPDAYBS</H1>Returns the number of days between the coupon date preceding the settlement, and the settlement date.  <H2>Syntax</H2><B>COUPDAYBS(settlementdate, maturitydate, frequency, basis)</B><BR><BR><B>settlementdate:</B> the settlement (purchase) date of the security.<BR><BR><B>maturitydate:</B> the maturity date of the security.<BR><BR><B>frequency: </B>number of interest payments per year (1, 2 or 4). <BR><BR> <B>basis</B> is an integer specifying the system of how many days are in a month or year, as follows: <TABLE border=\"0\" cellpadding=\"5\" cellspacing=\"0\" style=\"margin 1em auto 1em auto\"><TR><TD><B>basis</B></TD><TD><B>day counting system</B></TD></TR><TR><TD align=\"center\">0</TD><TD>US (NASD) system. 30 days/month, 360 days/year (30/360)</TD></TR><TR><TD align=\"center\">1</TD><TD>Actual/actual</TD></TR><TR><TD align=\"center\">2</TD><TD>Actual/360</TD></TR><TR><TD align=\"center\">3</TD><TD>Actual/365</TD></TR><TR><TD align=\"center\">4</TD><TD>European 30/360</TD></TR></TABLE><H2>Example</H2><B>COUPDAYBS(DATE(2007,1,25), DATE(2009,11,15), 2, 1)</B><BR> returns <B>71</B>. A bond is originally issued on 15 November 1999, with a ten year term; the date of maturity is 15 November 2009. You subsequently purchase it on the secondary market, with a settlement date of 25 January 2007. Interest is paid half-yearly (<B>frequency</B> is 2); thus interest is due on the 15 May and the 15 November each year, during the bond's term. Using basis 1, there are 71 (actual) days in the interest period directly before the settlement date, 15 November 2006 to 25 January 2007.  </BODY></HTML>";
		 else if(name.equals("COUPDAYSNC")) return "<HTML><BODY><H1>COUPDAYSNC</H1>Returns the number of days between the settlement date and the next coupon date.<H2>Syntax</H2><B>COUPDAYSNC(settlementdate, maturitydate, frequency, basis)</B><BR><BR><B>settlementdate:</B> the settlement (purchase) date of the security.<BR><BR><B>maturitydate:</B> the maturity date of the security.<BR><BR><B>frequency: </B>number of interest payments per year (1, 2 or 4). <BR><BR> <B>basis</B> is an integer specifying the system of how many days are in a month or year, as follows: <TABLE border=\"0\" cellpadding=\"5\" cellspacing=\"0\" style=\"margin 1em auto 1em auto\"><TR><TD><B>basis</B></TD><TD><B>day counting system</B></TD></TR><TR><TD align=\"center\">0</TD><TD>US (NASD) system. 30 days/month, 360 days/year (30/360)</TD></TR><TR><TD align=\"center\">1</TD><TD>Actual/actual</TD></TR><TR><TD align=\"center\">2</TD><TD>Actual/360</TD></TR><TR><TD align=\"center\">3</TD><TD>Actual/365</TD></TR><TR><TD align=\"center\">4</TD><TD>European 30/360</TD></TR></TABLE><H2>Example</H2><B>COUPDAYSNC(DATE(2007,1,25), DATE(2009,11,15), 2, 4)</B><BR> returns <B>110</B>. A bond is originally issued on 15 November 1999, with a ten year term; the date of maturity is 15 November 2009. You subsequently purchase it on the secondary market, with a settlement date of 25 January 2007; Interest is paid half-yearly (<B>frequency</B> is 2); thus interest is due on the 15 May and the 15 November each year, during the bond's term. Using basis 4, there are 110 days from the settlement date 25 January 2007 until the next interest payment on 15 May 07.</BODY></HTML>";
		 else if(name.equals("COUPNUM")) return "<HTML><BODY><H1>COUPNUM</H1>Returns the number of coupons (interest payments) between the settlement date and maturity. <H2>Syntax</H2><B>COUPNUM(settlementdate, maturitydate, frequency, basis)</B><BR><BR><B>settlementdate:</B> the settlement (purchase) date of the security.<BR><BR><B>maturitydate:</B> the maturity date of the security.<BR><BR><B>frequency: </B>number of interest payments per year (1, 2 or 4). <BR><BR> <B>basis</B> is an integer specifying the system of how many days are in a month or year, as follows: <TABLE border=\"0\" cellpadding=\"5\" cellspacing=\"0\" style=\"margin 1em auto 1em auto\"><TR><TD><B>basis</B></TD><TD><B>day counting system</B></TD></TR><TR><TD align=\"center\">0</TD><TD>US (NASD) system. 30 days/month, 360 days/year (30/360)</TD></TR><TR><TD align=\"center\">1</TD><TD>Actual/actual</TD></TR><TR><TD align=\"center\">2</TD><TD>Actual/360</TD></TR><TR><TD align=\"center\">3</TD><TD>Actual/365</TD></TR><TR><TD align=\"center\">4</TD><TD>European 30/360</TD></TR></TABLE><H2>Example</H2><B>COUPNUM(DATE(2007,1,25), DATE(2009,11,15), 2, 1)</B><BR> returns <B>6</B>. A bond is originally issued on 15 November 1999, with a ten year term; the date of maturity is 15 November 2009. You subsequently purchase it on the secondary market, with a settlement date of 25 January 2007. Interest is paid half-yearly (<B>frequency</B> is 2); thus interest is due on the 15 May and the 15 November each year, during the bond's term. Interest is paid 6 times: on 15 May 2007, 15 November 2007, 15 May 2008, 15 November 2008, 15 May 2009 and 15 November 2009. </BODY></HTML>";
		 else if(name.equals("COUPPCD")) return "<HTML><BODY><H1>COUPPCD</H1>Returns the coupon (interest payment) date which precedes the settlement date. <H2>Syntax</H2><B>COUPPCD(settlementdate, maturitydate, frequency, basis)</B><BR><BR><B>settlementdate:</B> the settlement (purchase) date of the security.<BR><BR><B>maturitydate:</B> the maturity date of the security.<BR><BR><B>frequency: </B>number of interest payments per year (1, 2 or 4). <BR><BR> <B>basis</B> is an integer specifying the system of how many days are in a month or year, as follows: <TABLE border=\"0\" cellpadding=\"5\" cellspacing=\"0\" style=\"margin 1em auto 1em auto\"><TR><TD><B>basis</B></TD><TD><B>day counting system</B></TD></TR><TR><TD align=\"center\">0</TD><TD>US (NASD) system. 30 days/month, 360 days/year (30/360)</TD></TR><TR><TD align=\"center\">1</TD><TD>Actual/actual</TD></TR><TR><TD align=\"center\">2</TD><TD>Actual/360</TD></TR><TR><TD align=\"center\">3</TD><TD>Actual/365</TD></TR><TR><TD align=\"center\">4</TD><TD>European 30/360</TD></TR></TABLE><H2>Example</H2><B>COUPPCD(DATE(2007,1,25), DATE(2009,11,15), 2, 1)</B><BR> returns <B>15 November 2006</B> as a date-time serial number; choose a format to display the date as you prefer. A bond is originally issued on 15 November 1999, with a ten year term; the date of maturity is 15 November 2009. You subsequently purchase it on the secondary market, with a settlement date of 25 January 2007. Interest is paid half-yearly (frequency is 2); thus interest is due on the 15 May and the 15 November each year, during the bond's term. The interest payment date just before 25 January 2007 is 15 November 2006.</BODY></HTML>";
		 else if(name.equals("COUPNCD")) return "<HTML><BODY><H1>COUPNCD</H1>Returns the coupon date next after the settlement date.  <H2>Syntax</H2><B>COUPNCD(settlementdate, maturitydate, frequency, basis)</B><BR><BR><B>settlementdate:</B> the settlement (purchase) date of the security.<BR><BR><B>maturitydate:</B> the maturity date of the security.<BR><BR><B>frequency: </B>number of interest payments per year (1, 2 or 4). <BR><BR> <B>basis</B> is an integer specifying the system of how many days are in a month or year, as follows: <TABLE border=\"0\" cellpadding=\"5\" cellspacing=\"0\" style=\"margin 1em auto 1em auto\"><TR><TD><B>basis</B></TD><TD><B>day counting system</B></TD></TR><TR><TD align=\"center\">0</TD><TD>US (NASD) system. 30 days/month, 360 days/year (30/360)</TD></TR><TR><TD align=\"center\">1</TD><TD>Actual/actual</TD></TR><TR><TD align=\"center\">2</TD><TD>Actual/360</TD></TR><TR><TD align=\"center\">3</TD><TD>Actual/365</TD></TR><TR><TD align=\"center\">4</TD><TD>European 30/360</TD></TR></TABLE><H2>Example</H2><B>COUPNCD(DATE(2007,1,25), DATE(2009,11,15), 2, 3)</B><BR> returns <B>15 May 2007</B> as a date-time serial number; choose a format to display the date as you prefer. A bond is originally issued on 15 November 1999, with a ten year term; the date of maturity is 15 November 2009. You subsequently purchase it on the secondary market, with a settlement date of 25 January 2007. Interest is paid half-yearly (frequency is 2); thus interest is due on the 15 May and the 15 November each year, during the bond's term. The next interest date after the settlement date 25 January 2007 is therefore 15 May 2007. </BODY></HTML>";
		 else if(name.equals("DISC")) return "<HTML><BODY><H1>DISC</H1>Returns the discount rate of a security.<H2>Syntax</H2><B>DISC(settlementdate, maturitydate, price, redemptionvalue,  basis)</B><BR><BR><B>settlementdate:</B> the settlement (purchase) date of the security.<BR><BR><B>maturitydate:</B> the maturity date of the security.<BR><BR><B>price:</B> the price of the security. <BR><BR><B>redemptionvalue:</B> the redemption value of the security.<BR><BR> <B>basis</B> is an integer specifying the system of how many days are in a month or year, as follows: <TABLE border=\"0\" cellpadding=\"5\" cellspacing=\"0\" style=\"margin 1em auto 1em auto\"><TR><TD><B>basis</B></TD><TD><B>day counting system</B></TD></TR><TR><TD align=\"center\">0</TD><TD>US (NASD) system. 30 days/month, 360 days/year (30/360)</TD></TR><TR><TD align=\"center\">1</TD><TD>Actual/actual</TD></TR><TR><TD align=\"center\">2</TD><TD>Actual/360</TD></TR><TR><TD align=\"center\">3</TD><TD>Actual/365</TD></TR><TR><TD align=\"center\">4</TD><TD>European 30/360</TD></TR></TABLE><H2>Example</H2><B>DISC(DATE(2007,12,21), DATE(2008,2,15), 98.9, 100, 1)</B><BR> returns approximately <B>0.072</B>, a discount rate of around 7.2%. </BODY></HTML>";
		 else if(name.equals("PRICEDISC")) return "<HTML><BODY><H1>PRICEDISC</H1>Calculates a price for a non-interest paying discounted bond.<H2>Syntax</H2><B>PRICEDISC(settlementdate, maturitydate, discountrate, redemptionvalue,  basis)</B><BR><BR><B>settlementdate:</B> the settlement (purchase) date of the security.<BR><BR><B>maturitydate:</B> the maturity date of the security.<BR><BR><B>discountrate:</B> the (annual) discount rate of the bond.  <BR><BR><B>redemptionvalue:</B> the redemption value of the security.<BR><BR> <B>basis</B> is an integer specifying the system of how many days are in a month or year, as follows: <TABLE border=\"0\" cellpadding=\"5\" cellspacing=\"0\" style=\"margin 1em auto 1em auto\"><TR><TD><B>basis</B></TD><TD><B>day counting system</B></TD></TR><TR><TD align=\"center\">0</TD><TD>US (NASD) system. 30 days/month, 360 days/year (30/360)</TD></TR><TR><TD align=\"center\">1</TD><TD>Actual/actual</TD></TR><TR><TD align=\"center\">2</TD><TD>Actual/360</TD></TR><TR><TD align=\"center\">3</TD><TD>Actual/365</TD></TR><TR><TD align=\"center\">4</TD><TD>European 30/360</TD></TR></TABLE><H2>Example</H2><B>PRICEDISC(DATE(2008,2,15), DATE(2008,11,30), 0.03, 100, 1)</B><BR> returns approximately <B>97.63</B>. You purchase and settle a bond on 15 February 2008; the bond will mature on 30 November 2008, yielding its face value of $1000. With a discount rate of 3% per annum, the value of the bond is $976.30 using the basis 1 date system.  </BODY></HTML>";
		 else if(name.equals("YIELDDISC")) return "<HTML><BODY><H1>YIELDDISC</H1>Calculates the yield for a non-interest paying discounted bond. <H2>Syntax</H2><B>YIELDDISC(settlementdate, maturitydate, price, redemptionvalue,  basis)</B><BR><BR><B>settlementdate:</B> the settlement (purchase) date of the security.<BR><BR><B>maturitydate:</B> the maturity date of the security.<BR><BR><B>price:</B> the price of the security, per 100 par value. <BR><BR><B>redemptionvalue:</B> the redemption value of the security.<BR><BR> <B>basis</B> is an integer specifying the system of how many days are in a month or year, as follows: <TABLE border=\"0\" cellpadding=\"5\" cellspacing=\"0\" style=\"margin 1em auto 1em auto\"><TR><TD><B>basis</B></TD><TD><B>day counting system</B></TD></TR><TR><TD align=\"center\">0</TD><TD>US (NASD) system. 30 days/month, 360 days/year (30/360)</TD></TR><TR><TD align=\"center\">1</TD><TD>Actual/actual</TD></TR><TR><TD align=\"center\">2</TD><TD>Actual/360</TD></TR><TR><TD align=\"center\">3</TD><TD>Actual/365</TD></TR><TR><TD align=\"center\">4</TD><TD>European 30/360</TD></TR></TABLE><H2>Example</H2><B>YIELDDISC(DATE(2008,2,15), DATE(2008,11,30), 97.63, 100, 1)</B><BR>returns approximately <B>0.0307</B> or 3.07%. You purchase and settle a bond for $976.30 on 15 February 2008; the bond will mature on 30 November 2008, yielding its face value of $1000. The yield is about 3% using the basis 1 calendar system.   </BODY></HTML>";
		 else if(name.equals("VALUTA")) return "<HTML><BODY><H1>VALUTA</H1>Returns a future date used in determining the value of a product that fluctuates in price according to a bank calendar.<H2>Syntax</H2><B>VALUTA(bank calendar, business days)</B><BR><BR><B>bank calendar:</B> the bank calendar used to determine the value date.<BR><BR><B>business days:</B> the number of business days added to present day.<H2>Example</H2><B>=VALUTA(&quot;Target&quot;,3)</B><BR> returns T+3 as date according to the Trans-european Automated Real-time Gross Express-settlement Transfer system calendar.</BODY></HTML>";
		 else if(name.equals("MATURITY")) return "<HTML><BODY><H1>MATURITY</H1>Returns the maturity date defined in the master data of a security business object.<H2>Syntax</H2><B>MATURITY(security identifier)</B><BR><BR><B>security identifier:</B> the security identifier of the security business object.<H2>Example</H2><B>=MATURITY(&quot;US912828HT06&quot;)</B><BR> returns <B>02/28/13</B> as date if the master data <B>Maturity Date</B> of the security business object with the security identifier <B>US912828HT06</B> is set to <B>02/28/13</B>.</BODY></HTML>";
		 else if(name.equals("COUPONRATE")) return "<HTML><BODY><H1>COUPONRATE</H1>Returns the coupon rate defined in the master data of a security business object.<H2>Syntax</H2><B>COUPONRATE(security identifier)</B><BR><BR><B>security identifier:</B> the security identifier of the security business object.<H2>Example</H2><B>=COUPONRATE(&quot;US912828HT06&quot;)</B><BR> returns <B>2.75</B> as date if the master data <B>Coupon Rate</B> of the security business object with the security identifier <B>US912828HT06</B> is set to <B>2.75</B>.</BODY></HTML>";
		 else if(name.equals("SPLINE")) return "<HTML><BODY><H1>SPLINE</H1>Computes a natural (also known as &quot;free&quot;, &quot;unclamped&quot;) cubic spline interpolation for the data set. <H2>Syntax</H2><B>SPLINE(yvalues; xvalues; new_xvalue)</B><BR><BR><B>yvalues</B> and <B>xvalues</B> are single row or column ranges specifying points in a set of data.<H2>Example</H2><B>=SPLINE(B2:B5; A2:A5; C2)</B></BODY></HTML>";
		 else if(name.equals("LINEAR")) return "<HTML><BODY><H1>SPLINE</H1>Computes a linear interpolation for the data set. <H2>Syntax</H2><B>LINEAR(yvalues; xvalues; new_xvalue)</B><BR><BR><B>yvalues</B> and <B>xvalues</B> are single row or column ranges specifying points in a set of data.<H2>Example</H2><B>=LINEAR(B2:B5; A2:A5; C2)</B></BODY></HTML>";
		 else if(name.equals("SLOPE")) return "<HTML><BODY><H1>SLOPE</H1>Fits a straight line to data using linear regression and returns its slope. <H2>Syntax</H2><B>SLOPE(yvalues; xvalues)</B><BR><BR><B>yvalues</B> and <B>xvalues</B> are single row or column ranges specifying points in a set of data.<H2>Example</H2><B>=SLOPE(B2:B6, A2:A6)</B><BR>where the x values in A2:A6 are 1, 2, 3, 4, 5 and the y values in B2:B6 are 2, 4, 6, 8, 11 returns <B>2.2</B>. The equation of the straight line found is very nearly y = 2x - thus the slope is very nearly (but not quite) 2.</BODY></HTML>";
		 else if(name.equals("INTERCEPT")) return "<HTML><BODY><H1>INTERCEPT</H1>Fits a straight line to data using linear regression and returns its intercept on the y-axis.<H2>Syntax</H2><B>INTERCEPT(yvalues; xvalues)</B><BR><BR><B>yvalues</B> and <B>xvalues</B> are single row or column ranges specifying points in a set of data.<H2>Example</H2><B>=INTERCEPT(B2:B6, A2:A6)</B><BR>where the x values in A2:A6 are 1, 2, 3, 4, 5 and the y values in B2:B6 are 2, 4, 7, 8, 10 returns <B>0.2</B>. The equation of the straight line found is very nearly y = 2x (and would be if B4 contained 6) - thus the straight line very nearly (but not quite) goes through the origin. </BODY></HTML>";
		 else if(name.equals("INTRATE")) return "<HTML><BODY><H1>INTRATE</H1>Returns the equivalent annual interest rate for an investment bought at one price and sold at another. <H2>Syntax</H2><B>INTRATE(settlementdate, maturitydate, purchasevalue, maturityvalue,  basis)</B><BR><BR><B>settlementdate:</B> the settlement (purchase) date of the security.<BR><BR><B>maturitydate:</B> the maturity date of the security.<BR><BR><B>purchasevalue:</B> the amount paid for the item.<BR><BR><B>maturityvalue:</B> the amount received for the item.<BR><BR> <B>basis</B> is an integer specifying the system of how many days are in a month or year, as follows: <TABLE border=\"0\" cellpadding=\"5\" cellspacing=\"0\" style=\"margin 1em auto 1em auto\"><TR><TD><B>basis</B></TD><TD><B>day counting system</B></TD></TR><TR><TD align=\"center\">0</TD><TD>US (NASD) system. 30 days/month, 360 days/year (30/360)</TD></TR><TR><TD align=\"center\">1</TD><TD>Actual/actual</TD></TR><TR><TD align=\"center\">2</TD><TD>Actual/360</TD></TR><TR><TD align=\"center\">3</TD><TD>Actual/365</TD></TR><TR><TD align=\"center\">4</TD><TD>European 30/360</TD></TR></TABLE><H2>Example</H2><B>INTRATE(DATE(2008,2,15),DATE(2008,5,15),1000000,1014420,2)</B><BR>returns approximately <B>0.05768</B> or 5.77%.</BODY></HTML>";
		 else if(name.equals("EFFECT")) return "<HTML><BODY><H1>EFFECT</H1>Returns the effective compounded interest rate given a nominal interest rate.<BR><BR><H2>Syntax</H2><B>EFFECTIVE(nom_rate, num)</B><BR><BR><B>nom_rate:</B> the nominal interest rate.<BR><BR><B>num:</B> the number of times interest is credited / compounded during the period that <B>nom_rate</B> applies to.<BR><BR>If an investment has a nominal rate, say for a year, but interest is paid and credited say each quarter, the interest paid each quarter will itself start earning interest. This increases the effective value. This function returns the effective rate - that is, the rate that would have to be paid at the end of the (say) year to give the same return.<H2>Example</H2><B>=EFFECT(0.6, 4)</B><BR>returns approximately <B>0.0614</B>, which is the effective rate of an investment with a nominal rate of 6% per annum, compounded quarterly.</BODY></HTML>";
		 else if(name.equals("NOMINAL")) return "<HTML><BODY><H1>NOMINAL</H1>Returns a nominal interest rate given the effective compounded interest rate.<BR><BR><H2>Syntax</H2><B>NOMINAL(eff_rate, num)</B><BR><BR><B>eff_rate:</B> the effective interest rate.<BR><BR><B>num:</B> the number of times interest is credited / compounded during the period that the nominal rate applies to.<BR><BR>If an investment has a nominal rate, say for a year, but interest is paid and credited say each quarter, the interest paid each quarter will itself start earning interest. This increases the effective value. The effective rate is the rate that would have to be paid at the end of the (say) year to give the same return.<BR>Given an effective rate, this function returns the appropriate nominal rate.<H2>Example</H2><B>=NOMINAL(0.6, 4)</B><BR>returns approximately <B>0.0587</B>, which is the nominal rate for an investment with a effective rate of 6% per annum, compounded quarterly.</BODY></HTML>";
		 else if(name.equals("PV")) return "<HTML><BODY><H1>PV</H1>Returns the present value of a stream of future payments with a final lump sum.<H2>Syntax</H2><B>PV(rate; numperiods, payment, futurevalue, type)</B><BR><BR><B>rate:</B> the (fixed) interest rate per period.<BR><BR><B>rate:</B> the (fixed) interest rate per period.<BR><BR><B>numperiods:</B>  the total number of payment periods in the term.<BR><BR><B>payment:</B>  the payment made each period. If <B>futurevalue</B> is given, this may omitted (defaults to 0). <BR><BR><B>futurevalue:</B> the cash balance you wish to attain at the end of the term (optional - defaults to 0). With a loan, this would normally be 0; with a bond this would be the redemption value.<BR><BR><B>type:</B> when payments are made (optional - defaults to 0):<TABLE border=\"0\" cellpadding=\"5\" cellspacing=\"0\" style=\"margin 1em auto 1em auto\"><TR><TD align=\"center\">0</TD><TD>at the end of each period.</TD></TR><TR><TD align=\"center\">1</TD><TD>at the start of each period (including a payment at the start of the term).</TD></TR></TABLE><H2>Example</H2><B>PV(0.07/2, 3*2, 100, 1000, 0)</B><BR> returns <B>-1,346.36</B> in currency units. A 3 year bond is issued, paying 100 currency units semiannual coupons and 1000 currency units on maturity. You require an annual rate of return of 7% (compounded semiannually) bearing in mind any risk, and hence you value the bond on issue at 1,346.36. The result is shown as negative, as you would have to pay for the bond. </BODY></HTML>";
		 else if(name.equals("ISSUEDATE")) return "<HTML><BODY><H1>ISSUEDATE</H1>Returns the issue date defined in the master data of a security business object.<H2>Syntax</H2><B>ISSUEDATE(security identifier)</B><BR><BR><B>security identifier:</B> the security identifier of the security business object.<H2>Example</H2><B>=ISSUEDATE(&quot;DE0001135481&quot;)</B><BR> returns <B>04/27/2012</B> as date if the master data <B>Issue Date</B> of the security business object with the security identifier <B>DE0001135481</B> is set to <B>04/27/2012</B>.</BODY></HTML>";
		 else if(name.equals("INTERESTACCRUALDATE")) return "<HTML><BODY><H1>INTERESTACCRUALDATE</H1>Returns the interest accrual date defined in the master data of a security business object.<H2>Syntax</H2><B>MATURITY(security identifier)</B><BR><BR><B>security identifier:</B> the security identifier of the security business object.<H2>Example</H2><B>=INTERESTACCRUALDATE(&quot;DE0001135481&quot;)</B><BR> returns <B>07/04/2013</B> as date if the master data <B>Interest Accrual Date</B> of the security business object with the security identifier <B>DE0001135481</B> is set to <B>07/04/2013</B>.</BODY></HTML>";
		 return null;
	}
}
